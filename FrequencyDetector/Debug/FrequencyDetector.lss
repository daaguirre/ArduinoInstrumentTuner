
FrequencyDetector.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000098  00800100  0000137c  00001410  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000137c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000b6  00800198  00800198  000014a8  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000014a8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001504  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001c0  00000000  00000000  00001544  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002311  00000000  00000000  00001704  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c29  00000000  00000000  00003a15  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001157  00000000  00000000  0000463e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004e8  00000000  00000000  00005798  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000818  00000000  00000000  00005c80  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001217  00000000  00000000  00006498  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000188  00000000  00000000  000076af  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 fe 04 	jmp	0x9fc	; 0x9fc <__vector_1>
       8:	0c 94 24 05 	jmp	0xa48	; 0xa48 <__vector_2>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 4a 05 	jmp	0xa94	; 0xa94 <__vector_14>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 d8 04 	jmp	0x9b0	; 0x9b0 <__vector_21>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	ec e7       	ldi	r30, 0x7C	; 124
      7c:	f3 e1       	ldi	r31, 0x13	; 19
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	a8 39       	cpi	r26, 0x98	; 152
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	22 e0       	ldi	r18, 0x02	; 2
      8c:	a8 e9       	ldi	r26, 0x98	; 152
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	ae 34       	cpi	r26, 0x4E	; 78
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 89 04 	call	0x912	; 0x912 <main>
      9e:	0c 94 bc 09 	jmp	0x1378	; 0x1378 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <init_button_interrupts>:
#include "millis.h"

//on rising edge
void init_button_interrupts()
{
	EIMSK |= (1 << INT0) | (1 << INT1); //enable external nterrupt 0
      a6:	8d b3       	in	r24, 0x1d	; 29
      a8:	83 60       	ori	r24, 0x03	; 3
      aa:	8d bb       	out	0x1d, r24	; 29
	EICRA = 0x0F; //make INTO and INT1 rising edge
      ac:	8f e0       	ldi	r24, 0x0F	; 15
      ae:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
      b2:	08 95       	ret

000000b4 <debounce_button>:
}

void debounce_button(button_debouncer_t *button)
{
      b4:	cf 92       	push	r12
      b6:	df 92       	push	r13
      b8:	ef 92       	push	r14
      ba:	ff 92       	push	r15
      bc:	cf 93       	push	r28
      be:	df 93       	push	r29
      c0:	ec 01       	movw	r28, r24
	 unsigned long interrupt_time = millis();
      c2:	0e 94 7d 05 	call	0xafa	; 0xafa <millis>
      c6:	6b 01       	movw	r12, r22
      c8:	7c 01       	movw	r14, r24
	 // If interrupts come faster than 200ms, assume it's a bounce and ignore
	 if (interrupt_time - button->last_interrupt_time > 200)
      ca:	88 81       	ld	r24, Y
      cc:	99 81       	ldd	r25, Y+1	; 0x01
      ce:	aa 81       	ldd	r26, Y+2	; 0x02
      d0:	bb 81       	ldd	r27, Y+3	; 0x03
      d2:	a7 01       	movw	r20, r14
      d4:	96 01       	movw	r18, r12
      d6:	28 1b       	sub	r18, r24
      d8:	39 0b       	sbc	r19, r25
      da:	4a 0b       	sbc	r20, r26
      dc:	5b 0b       	sbc	r21, r27
      de:	29 3c       	cpi	r18, 0xC9	; 201
      e0:	31 05       	cpc	r19, r1
      e2:	41 05       	cpc	r20, r1
      e4:	51 05       	cpc	r21, r1
      e6:	18 f0       	brcs	.+6      	; 0xee <debounce_button+0x3a>
	 {
		button->button_action();
      e8:	ec 81       	ldd	r30, Y+4	; 0x04
      ea:	fd 81       	ldd	r31, Y+5	; 0x05
      ec:	09 95       	icall
	 }
	 button->last_interrupt_time = interrupt_time;	
      ee:	c8 82       	st	Y, r12
      f0:	d9 82       	std	Y+1, r13	; 0x01
      f2:	ea 82       	std	Y+2, r14	; 0x02
      f4:	fb 82       	std	Y+3, r15	; 0x03
}
      f6:	df 91       	pop	r29
      f8:	cf 91       	pop	r28
      fa:	ff 90       	pop	r15
      fc:	ef 90       	pop	r14
      fe:	df 90       	pop	r13
     100:	cf 90       	pop	r12
     102:	08 95       	ret

00000104 <frequency_detector_init>:
}

void frequency_detector_init()
{
	//clear ADCSRA and ADCSRB registers
	ADCSRA = 0;
     104:	ea e7       	ldi	r30, 0x7A	; 122
     106:	f0 e0       	ldi	r31, 0x00	; 0
     108:	10 82       	st	Z, r1
	ADCSRB = 0;
     10a:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x7e007b>
	
	ADMUX |= (1 << REFS0); //set reference voltage
     10e:	ac e7       	ldi	r26, 0x7C	; 124
     110:	b0 e0       	ldi	r27, 0x00	; 0
     112:	8c 91       	ld	r24, X
     114:	80 64       	ori	r24, 0x40	; 64
     116:	8c 93       	st	X, r24
	ADMUX |= (1 << ADLAR); //left align the ADC value- so we can read highest 8 bits from ADCH register only
     118:	8c 91       	ld	r24, X
     11a:	80 62       	ori	r24, 0x20	; 32
     11c:	8c 93       	st	X, r24
	
	ADCSRA |= (1 << ADPS2) | (1 << ADPS0); //set ADC clock with 32 prescaler- 16mHz/32=500kHz
     11e:	80 81       	ld	r24, Z
     120:	85 60       	ori	r24, 0x05	; 5
     122:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADATE); //enabble auto trigger
     124:	80 81       	ld	r24, Z
     126:	80 62       	ori	r24, 0x20	; 32
     128:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADIE); //enable interrupts when measurement complete
     12a:	80 81       	ld	r24, Z
     12c:	88 60       	ori	r24, 0x08	; 8
     12e:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADEN); //enable ADC
     130:	80 81       	ld	r24, Z
     132:	80 68       	ori	r24, 0x80	; 128
     134:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADSC); //start ADC measurements
     136:	80 81       	ld	r24, Z
     138:	80 64       	ori	r24, 0x40	; 64
     13a:	80 83       	st	Z, r24
     13c:	08 95       	ret

0000013e <new_frequency_detected>:
}

bool new_frequency_detected()
{
	return checkMaxAmp>ampThreshold;
     13e:	81 e0       	ldi	r24, 0x01	; 1
     140:	20 91 2d 02 	lds	r18, 0x022D	; 0x80022d <checkMaxAmp>
     144:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__data_start>
     148:	92 17       	cp	r25, r18
     14a:	08 f0       	brcs	.+2      	; 0x14e <new_frequency_detected+0x10>
     14c:	80 e0       	ldi	r24, 0x00	; 0
}
     14e:	08 95       	ret

00000150 <get_frequency>:

float get_frequency()
{
	return 38462.0f/period;
     150:	60 91 29 02 	lds	r22, 0x0229	; 0x800229 <period>
     154:	70 91 2a 02 	lds	r23, 0x022A	; 0x80022a <period+0x1>
     158:	80 e0       	ldi	r24, 0x00	; 0
     15a:	90 e0       	ldi	r25, 0x00	; 0
     15c:	0e 94 44 06 	call	0xc88	; 0xc88 <__floatunsisf>
     160:	9b 01       	movw	r18, r22
     162:	ac 01       	movw	r20, r24
     164:	60 e0       	ldi	r22, 0x00	; 0
     166:	7e e3       	ldi	r23, 0x3E	; 62
     168:	86 e1       	ldi	r24, 0x16	; 22
     16a:	97 e4       	ldi	r25, 0x47	; 71
     16c:	0e 94 9c 05 	call	0xb38	; 0xb38 <__divsf3>
}
     170:	08 95       	ret

00000172 <frequency_detector_update>:


void frequency_detector_update(uint8_t new_data)
{
     172:	cf 93       	push	r28
     174:	df 93       	push	r29
	//positive slope and crossing midpoint (2.5V)
	if (prevData < 127 && new_data >=127)
     176:	90 91 a1 01 	lds	r25, 0x01A1	; 0x8001a1 <prevData>
     17a:	9f 37       	cpi	r25, 0x7F	; 127
     17c:	08 f0       	brcs	.+2      	; 0x180 <frequency_detector_update+0xe>
     17e:	b9 c0       	rjmp	.+370    	; 0x2f2 <frequency_detector_update+0x180>
     180:	8f 37       	cpi	r24, 0x7F	; 127
     182:	08 f4       	brcc	.+2      	; 0x186 <frequency_detector_update+0x14>
     184:	b6 c0       	rjmp	.+364    	; 0x2f2 <frequency_detector_update+0x180>
	{
		newSlope = new_data - prevData;//calculate slope
     186:	28 2f       	mov	r18, r24
     188:	30 e0       	ldi	r19, 0x00	; 0
     18a:	29 1b       	sub	r18, r25
     18c:	31 09       	sbc	r19, r1
     18e:	30 93 28 02 	sts	0x0228, r19	; 0x800228 <newSlope+0x1>
     192:	20 93 27 02 	sts	0x0227, r18	; 0x800227 <newSlope>
		
		if (abs(newSlope-maxSlope)<slopeTol)//if slopes are ==
     196:	e0 91 9c 01 	lds	r30, 0x019C	; 0x80019c <maxSlope>
     19a:	f0 91 9d 01 	lds	r31, 0x019D	; 0x80019d <maxSlope+0x1>
     19e:	40 91 03 01 	lds	r20, 0x0103	; 0x800103 <slopeTol>
     1a2:	50 e0       	ldi	r21, 0x00	; 0
     1a4:	d9 01       	movw	r26, r18
     1a6:	ae 1b       	sub	r26, r30
     1a8:	bf 0b       	sbc	r27, r31
     1aa:	bd 01       	movw	r22, r26
     1ac:	22 f4       	brpl	.+8      	; 0x1b6 <frequency_detector_update+0x44>
     1ae:	66 27       	eor	r22, r22
     1b0:	77 27       	eor	r23, r23
     1b2:	6a 1b       	sub	r22, r26
     1b4:	7b 0b       	sbc	r23, r27
     1b6:	64 17       	cp	r22, r20
     1b8:	75 07       	cpc	r23, r21
     1ba:	0c f0       	brlt	.+2      	; 0x1be <frequency_detector_update+0x4c>
     1bc:	7b c0       	rjmp	.+246    	; 0x2b4 <frequency_detector_update+0x142>
		{
			//record new data and reset time
			slope[my_index] = newSlope;
     1be:	90 91 9e 01 	lds	r25, 0x019E	; 0x80019e <my_index>
     1c2:	69 2f       	mov	r22, r25
     1c4:	70 e0       	ldi	r23, 0x00	; 0
     1c6:	66 0f       	add	r22, r22
     1c8:	77 1f       	adc	r23, r23
     1ca:	fb 01       	movw	r30, r22
     1cc:	e2 5d       	subi	r30, 0xD2	; 210
     1ce:	fd 4f       	sbci	r31, 0xFD	; 253
     1d0:	31 83       	std	Z+1, r19	; 0x01
     1d2:	20 83       	st	Z, r18
			timer[my_index] = time;
     1d4:	c0 91 9f 01 	lds	r28, 0x019F	; 0x80019f <time>
     1d8:	d0 91 a0 01 	lds	r29, 0x01A0	; 0x8001a0 <time+0x1>
     1dc:	fb 01       	movw	r30, r22
     1de:	ed 5e       	subi	r30, 0xED	; 237
     1e0:	fd 4f       	sbci	r31, 0xFD	; 253
     1e2:	d1 83       	std	Z+1, r29	; 0x01
     1e4:	c0 83       	st	Z, r28
			time = 0;
     1e6:	10 92 a0 01 	sts	0x01A0, r1	; 0x8001a0 <time+0x1>
     1ea:	10 92 9f 01 	sts	0x019F, r1	; 0x80019f <time>
			if (my_index == 0)//new max slope just reset
     1ee:	91 11       	cpse	r25, r1
     1f0:	06 c0       	rjmp	.+12     	; 0x1fe <frequency_detector_update+0x8c>
			{
				noMatch = 0;
     1f2:	10 92 9b 01 	sts	0x019B, r1	; 0x80019b <noMatch>
				my_index++;//increment index
     1f6:	91 e0       	ldi	r25, 0x01	; 1
     1f8:	90 93 9e 01 	sts	0x019E, r25	; 0x80019e <my_index>
     1fc:	7a c0       	rjmp	.+244    	; 0x2f2 <frequency_detector_update+0x180>
			}
			else if (abs(timer[0]-timer[my_index])<timerTol && abs(slope[0]-newSlope)<slopeTol)//if timer duration and slopes match
     1fe:	60 91 13 02 	lds	r22, 0x0213	; 0x800213 <timer>
     202:	70 91 14 02 	lds	r23, 0x0214	; 0x800214 <timer+0x1>
     206:	6c 1b       	sub	r22, r28
     208:	7d 0b       	sbc	r23, r29
     20a:	fb 01       	movw	r30, r22
     20c:	ff 23       	and	r31, r31
     20e:	24 f4       	brge	.+8      	; 0x218 <frequency_detector_update+0xa6>
     210:	ee 27       	eor	r30, r30
     212:	ff 27       	eor	r31, r31
     214:	e6 1b       	sub	r30, r22
     216:	f7 0b       	sbc	r31, r23
     218:	60 91 01 01 	lds	r22, 0x0101	; 0x800101 <timerTol>
     21c:	70 91 02 01 	lds	r23, 0x0102	; 0x800102 <timerTol+0x1>
     220:	e6 17       	cp	r30, r22
     222:	f7 07       	cpc	r31, r23
     224:	c4 f5       	brge	.+112    	; 0x296 <frequency_detector_update+0x124>
     226:	60 91 2e 02 	lds	r22, 0x022E	; 0x80022e <slope>
     22a:	70 91 2f 02 	lds	r23, 0x022F	; 0x80022f <slope+0x1>
     22e:	62 1b       	sub	r22, r18
     230:	73 0b       	sbc	r23, r19
     232:	fb 01       	movw	r30, r22
     234:	ff 23       	and	r31, r31
     236:	24 f4       	brge	.+8      	; 0x240 <frequency_detector_update+0xce>
     238:	ee 27       	eor	r30, r30
     23a:	ff 27       	eor	r31, r31
     23c:	e6 1b       	sub	r30, r22
     23e:	f7 0b       	sbc	r31, r23
     240:	e4 17       	cp	r30, r20
     242:	f5 07       	cpc	r31, r21
     244:	44 f5       	brge	.+80     	; 0x296 <frequency_detector_update+0x124>
     246:	e3 e1       	ldi	r30, 0x13	; 19
     248:	f2 e0       	ldi	r31, 0x02	; 2
     24a:	91 50       	subi	r25, 0x01	; 1
     24c:	a9 2f       	mov	r26, r25
     24e:	b0 e0       	ldi	r27, 0x00	; 0
     250:	aa 0f       	add	r26, r26
     252:	bb 1f       	adc	r27, r27
     254:	ab 5e       	subi	r26, 0xEB	; 235
     256:	bd 4f       	sbci	r27, 0xFD	; 253
     258:	40 e0       	ldi	r20, 0x00	; 0
     25a:	50 e0       	ldi	r21, 0x00	; 0
			{
				//sum timer values
				totalTimer = 0;
				for (uint8_t i=0;i<my_index;i++)
				{
					totalTimer+=timer[i];
     25c:	61 91       	ld	r22, Z+
     25e:	71 91       	ld	r23, Z+
     260:	46 0f       	add	r20, r22
     262:	57 1f       	adc	r21, r23
			}
			else if (abs(timer[0]-timer[my_index])<timerTol && abs(slope[0]-newSlope)<slopeTol)//if timer duration and slopes match
			{
				//sum timer values
				totalTimer = 0;
				for (uint8_t i=0;i<my_index;i++)
     264:	ea 17       	cp	r30, r26
     266:	fb 07       	cpc	r31, r27
     268:	c9 f7       	brne	.-14     	; 0x25c <frequency_detector_update+0xea>
     26a:	50 93 2c 02 	sts	0x022C, r21	; 0x80022c <totalTimer+0x1>
     26e:	40 93 2b 02 	sts	0x022B, r20	; 0x80022b <totalTimer>
				{
					totalTimer+=timer[i];
				}
				period = totalTimer;//set period
     272:	50 93 2a 02 	sts	0x022A, r21	; 0x80022a <period+0x1>
     276:	40 93 29 02 	sts	0x0229, r20	; 0x800229 <period>
				//reset new zero index values to compare with
				timer[0] = timer[my_index];
     27a:	d0 93 14 02 	sts	0x0214, r29	; 0x800214 <timer+0x1>
     27e:	c0 93 13 02 	sts	0x0213, r28	; 0x800213 <timer>
				slope[0] = slope[my_index];
     282:	30 93 2f 02 	sts	0x022F, r19	; 0x80022f <slope+0x1>
     286:	20 93 2e 02 	sts	0x022E, r18	; 0x80022e <slope>
				my_index = 1;//set index to 1
     28a:	91 e0       	ldi	r25, 0x01	; 1
     28c:	90 93 9e 01 	sts	0x019E, r25	; 0x80019e <my_index>
				noMatch = 0;
     290:	10 92 9b 01 	sts	0x019B, r1	; 0x80019b <noMatch>
     294:	2e c0       	rjmp	.+92     	; 0x2f2 <frequency_detector_update+0x180>
			}
			else//crossing midpoint but not match
			{
				my_index++;//increment index
     296:	9f 5f       	subi	r25, 0xFF	; 255
				if (my_index > 9)
     298:	9a 30       	cpi	r25, 0x0A	; 10
     29a:	18 f4       	brcc	.+6      	; 0x2a2 <frequency_detector_update+0x130>
				my_index = 1;//set index to 1
				noMatch = 0;
			}
			else//crossing midpoint but not match
			{
				my_index++;//increment index
     29c:	90 93 9e 01 	sts	0x019E, r25	; 0x80019e <my_index>
     2a0:	28 c0       	rjmp	.+80     	; 0x2f2 <frequency_detector_update+0x180>
uint8_t maxAmp = 0;
uint8_t checkMaxAmp;
uint8_t ampThreshold = 30;//raise if you have a very noisy signal

static void reset(){//clea out some variables
	my_index = 0;//reset index
     2a2:	10 92 9e 01 	sts	0x019E, r1	; 0x80019e <my_index>
	noMatch = 0;//reset match couner
     2a6:	10 92 9b 01 	sts	0x019B, r1	; 0x80019b <noMatch>
	maxSlope = 0;//reset slope
     2aa:	10 92 9d 01 	sts	0x019D, r1	; 0x80019d <maxSlope+0x1>
     2ae:	10 92 9c 01 	sts	0x019C, r1	; 0x80019c <maxSlope>
     2b2:	1f c0       	rjmp	.+62     	; 0x2f2 <frequency_detector_update+0x180>
				{
					reset();
				}
			}
		}
		else if (newSlope>maxSlope)//if new slope is much larger than max slope
     2b4:	e2 17       	cp	r30, r18
     2b6:	f3 07       	cpc	r31, r19
     2b8:	6c f4       	brge	.+26     	; 0x2d4 <frequency_detector_update+0x162>
		{
			maxSlope = newSlope;
     2ba:	30 93 9d 01 	sts	0x019D, r19	; 0x80019d <maxSlope+0x1>
     2be:	20 93 9c 01 	sts	0x019C, r18	; 0x80019c <maxSlope>
			time = 0;//reset clock
     2c2:	10 92 a0 01 	sts	0x01A0, r1	; 0x8001a0 <time+0x1>
     2c6:	10 92 9f 01 	sts	0x019F, r1	; 0x80019f <time>
			noMatch = 0;
     2ca:	10 92 9b 01 	sts	0x019B, r1	; 0x80019b <noMatch>
			my_index = 0;//reset index
     2ce:	10 92 9e 01 	sts	0x019E, r1	; 0x80019e <my_index>
     2d2:	0f c0       	rjmp	.+30     	; 0x2f2 <frequency_detector_update+0x180>
		}
		else//slope not steep enough
		{
			noMatch++;//increment no match counter
     2d4:	90 91 9b 01 	lds	r25, 0x019B	; 0x80019b <noMatch>
     2d8:	9f 5f       	subi	r25, 0xFF	; 255
     2da:	90 93 9b 01 	sts	0x019B, r25	; 0x80019b <noMatch>
			if (noMatch>9)
     2de:	9a 30       	cpi	r25, 0x0A	; 10
     2e0:	40 f0       	brcs	.+16     	; 0x2f2 <frequency_detector_update+0x180>
uint8_t maxAmp = 0;
uint8_t checkMaxAmp;
uint8_t ampThreshold = 30;//raise if you have a very noisy signal

static void reset(){//clea out some variables
	my_index = 0;//reset index
     2e2:	10 92 9e 01 	sts	0x019E, r1	; 0x80019e <my_index>
	noMatch = 0;//reset match couner
     2e6:	10 92 9b 01 	sts	0x019B, r1	; 0x80019b <noMatch>
	maxSlope = 0;//reset slope
     2ea:	10 92 9d 01 	sts	0x019D, r1	; 0x80019d <maxSlope+0x1>
     2ee:	10 92 9c 01 	sts	0x019C, r1	; 0x80019c <maxSlope>
				reset();
			}
		}
	}
	
	if (new_data == 0 || new_data == 1023){//if clipping
     2f2:	81 11       	cpse	r24, r1
     2f4:	03 c0       	rjmp	.+6      	; 0x2fc <frequency_detector_update+0x18a>
		clipping = 1;//currently clipping
     2f6:	91 e0       	ldi	r25, 0x01	; 1
     2f8:	90 93 a2 01 	sts	0x01A2, r25	; 0x8001a2 <clipping>
	}
	
	time++;//increment timer at rate of 38.5kHz
     2fc:	20 91 9f 01 	lds	r18, 0x019F	; 0x80019f <time>
     300:	30 91 a0 01 	lds	r19, 0x01A0	; 0x8001a0 <time+0x1>
     304:	2f 5f       	subi	r18, 0xFF	; 255
     306:	3f 4f       	sbci	r19, 0xFF	; 255
     308:	30 93 a0 01 	sts	0x01A0, r19	; 0x8001a0 <time+0x1>
     30c:	20 93 9f 01 	sts	0x019F, r18	; 0x80019f <time>
	ampTimer++;//increment amplitude timer
     310:	20 91 99 01 	lds	r18, 0x0199	; 0x800199 <ampTimer>
     314:	30 91 9a 01 	lds	r19, 0x019A	; 0x80019a <ampTimer+0x1>
     318:	2f 5f       	subi	r18, 0xFF	; 255
     31a:	3f 4f       	sbci	r19, 0xFF	; 255
     31c:	30 93 9a 01 	sts	0x019A, r19	; 0x80019a <ampTimer+0x1>
     320:	20 93 99 01 	sts	0x0199, r18	; 0x800199 <ampTimer>
	if (abs(127-new_data)>maxAmp){
     324:	4f e7       	ldi	r20, 0x7F	; 127
     326:	50 e0       	ldi	r21, 0x00	; 0
     328:	48 1b       	sub	r20, r24
     32a:	51 09       	sbc	r21, r1
     32c:	ba 01       	movw	r22, r20
     32e:	22 f4       	brpl	.+8      	; 0x338 <frequency_detector_update+0x1c6>
     330:	66 27       	eor	r22, r22
     332:	77 27       	eor	r23, r23
     334:	64 1b       	sub	r22, r20
     336:	75 0b       	sbc	r23, r21
     338:	40 91 98 01 	lds	r20, 0x0198	; 0x800198 <__data_end>
     33c:	50 e0       	ldi	r21, 0x00	; 0
     33e:	46 17       	cp	r20, r22
     340:	57 07       	cpc	r21, r23
     342:	14 f4       	brge	.+4      	; 0x348 <frequency_detector_update+0x1d6>
		maxAmp = abs(127-new_data);
     344:	60 93 98 01 	sts	0x0198, r22	; 0x800198 <__data_end>
	}
	if (ampTimer==1000)
     348:	28 3e       	cpi	r18, 0xE8	; 232
     34a:	33 40       	sbci	r19, 0x03	; 3
     34c:	51 f4       	brne	.+20     	; 0x362 <frequency_detector_update+0x1f0>
	{
		ampTimer = 0;
     34e:	10 92 9a 01 	sts	0x019A, r1	; 0x80019a <ampTimer+0x1>
     352:	10 92 99 01 	sts	0x0199, r1	; 0x800199 <ampTimer>
		checkMaxAmp = maxAmp;
     356:	90 91 98 01 	lds	r25, 0x0198	; 0x800198 <__data_end>
     35a:	90 93 2d 02 	sts	0x022D, r25	; 0x80022d <checkMaxAmp>
		maxAmp = 0;
     35e:	10 92 98 01 	sts	0x0198, r1	; 0x800198 <__data_end>
	}
	
	prevData = new_data;//store previous value
     362:	80 93 a1 01 	sts	0x01A1, r24	; 0x8001a1 <prevData>
     366:	df 91       	pop	r29
     368:	cf 91       	pop	r28
     36a:	08 95       	ret

0000036c <pinChange>:
{
	Lcd8_Set_Cursor(1,9);
	char target_freq_str[4];
	sprintf(target_freq_str,"%d",target_frequency);
	Lcd8_Write_String(target_freq_str);
}
     36c:	67 2b       	or	r22, r23
     36e:	09 f0       	breq	.+2      	; 0x372 <pinChange+0x6>
     370:	73 c0       	rjmp	.+230    	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
     372:	8a 30       	cpi	r24, 0x0A	; 10
     374:	91 05       	cpc	r25, r1
     376:	11 f4       	brne	.+4      	; 0x37c <pinChange+0x10>
     378:	28 98       	cbi	0x05, 0	; 5
     37a:	08 95       	ret
     37c:	8b 30       	cpi	r24, 0x0B	; 11
     37e:	91 05       	cpc	r25, r1
     380:	11 f4       	brne	.+4      	; 0x386 <pinChange+0x1a>
     382:	29 98       	cbi	0x05, 1	; 5
     384:	08 95       	ret
     386:	8c 30       	cpi	r24, 0x0C	; 12
     388:	91 05       	cpc	r25, r1
     38a:	11 f4       	brne	.+4      	; 0x390 <pinChange+0x24>
     38c:	2a 98       	cbi	0x05, 2	; 5
     38e:	08 95       	ret
     390:	8d 30       	cpi	r24, 0x0D	; 13
     392:	91 05       	cpc	r25, r1
     394:	11 f4       	brne	.+4      	; 0x39a <pinChange+0x2e>
     396:	2b 98       	cbi	0x05, 3	; 5
     398:	08 95       	ret
     39a:	8e 30       	cpi	r24, 0x0E	; 14
     39c:	91 05       	cpc	r25, r1
     39e:	11 f4       	brne	.+4      	; 0x3a4 <pinChange+0x38>
     3a0:	2c 98       	cbi	0x05, 4	; 5
     3a2:	08 95       	ret
     3a4:	8f 30       	cpi	r24, 0x0F	; 15
     3a6:	91 05       	cpc	r25, r1
     3a8:	11 f4       	brne	.+4      	; 0x3ae <pinChange+0x42>
     3aa:	2d 98       	cbi	0x05, 5	; 5
     3ac:	08 95       	ret
     3ae:	80 31       	cpi	r24, 0x10	; 16
     3b0:	91 05       	cpc	r25, r1
     3b2:	11 f4       	brne	.+4      	; 0x3b8 <pinChange+0x4c>
     3b4:	2e 98       	cbi	0x05, 6	; 5
     3b6:	08 95       	ret
     3b8:	81 31       	cpi	r24, 0x11	; 17
     3ba:	91 05       	cpc	r25, r1
     3bc:	11 f4       	brne	.+4      	; 0x3c2 <pinChange+0x56>
     3be:	2f 98       	cbi	0x05, 7	; 5
     3c0:	08 95       	ret
     3c2:	84 31       	cpi	r24, 0x14	; 20
     3c4:	91 05       	cpc	r25, r1
     3c6:	11 f4       	brne	.+4      	; 0x3cc <pinChange+0x60>
     3c8:	40 98       	cbi	0x08, 0	; 8
     3ca:	08 95       	ret
     3cc:	85 31       	cpi	r24, 0x15	; 21
     3ce:	91 05       	cpc	r25, r1
     3d0:	11 f4       	brne	.+4      	; 0x3d6 <pinChange+0x6a>
     3d2:	41 98       	cbi	0x08, 1	; 8
     3d4:	08 95       	ret
     3d6:	86 31       	cpi	r24, 0x16	; 22
     3d8:	91 05       	cpc	r25, r1
     3da:	11 f4       	brne	.+4      	; 0x3e0 <pinChange+0x74>
     3dc:	42 98       	cbi	0x08, 2	; 8
     3de:	08 95       	ret
     3e0:	87 31       	cpi	r24, 0x17	; 23
     3e2:	91 05       	cpc	r25, r1
     3e4:	11 f4       	brne	.+4      	; 0x3ea <pinChange+0x7e>
     3e6:	43 98       	cbi	0x08, 3	; 8
     3e8:	08 95       	ret
     3ea:	88 31       	cpi	r24, 0x18	; 24
     3ec:	91 05       	cpc	r25, r1
     3ee:	11 f4       	brne	.+4      	; 0x3f4 <pinChange+0x88>
     3f0:	44 98       	cbi	0x08, 4	; 8
     3f2:	08 95       	ret
     3f4:	89 31       	cpi	r24, 0x19	; 25
     3f6:	91 05       	cpc	r25, r1
     3f8:	11 f4       	brne	.+4      	; 0x3fe <pinChange+0x92>
     3fa:	45 98       	cbi	0x08, 5	; 8
     3fc:	08 95       	ret
     3fe:	8a 31       	cpi	r24, 0x1A	; 26
     400:	91 05       	cpc	r25, r1
     402:	11 f4       	brne	.+4      	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
     404:	46 98       	cbi	0x08, 6	; 8
     406:	08 95       	ret
     408:	8e 31       	cpi	r24, 0x1E	; 30
     40a:	91 05       	cpc	r25, r1
     40c:	11 f4       	brne	.+4      	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
     40e:	58 98       	cbi	0x0b, 0	; 11
     410:	08 95       	ret
     412:	8f 31       	cpi	r24, 0x1F	; 31
     414:	91 05       	cpc	r25, r1
     416:	11 f4       	brne	.+4      	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
     418:	59 98       	cbi	0x0b, 1	; 11
     41a:	08 95       	ret
     41c:	80 32       	cpi	r24, 0x20	; 32
     41e:	91 05       	cpc	r25, r1
     420:	11 f4       	brne	.+4      	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
     422:	5a 98       	cbi	0x0b, 2	; 11
     424:	08 95       	ret
     426:	81 32       	cpi	r24, 0x21	; 33
     428:	91 05       	cpc	r25, r1
     42a:	11 f4       	brne	.+4      	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
     42c:	5b 98       	cbi	0x0b, 3	; 11
     42e:	08 95       	ret
     430:	82 32       	cpi	r24, 0x22	; 34
     432:	91 05       	cpc	r25, r1
     434:	11 f4       	brne	.+4      	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
     436:	5c 98       	cbi	0x0b, 4	; 11
     438:	08 95       	ret
     43a:	83 32       	cpi	r24, 0x23	; 35
     43c:	91 05       	cpc	r25, r1
     43e:	11 f4       	brne	.+4      	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
     440:	5d 98       	cbi	0x0b, 5	; 11
     442:	08 95       	ret
     444:	84 32       	cpi	r24, 0x24	; 36
     446:	91 05       	cpc	r25, r1
     448:	11 f4       	brne	.+4      	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
     44a:	5e 98       	cbi	0x0b, 6	; 11
     44c:	08 95       	ret
     44e:	85 97       	sbiw	r24, 0x25	; 37
     450:	09 f0       	breq	.+2      	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
     452:	73 c0       	rjmp	.+230    	; 0x53a <__LOCK_REGION_LENGTH__+0x13a>
     454:	5f 98       	cbi	0x0b, 7	; 11
     456:	08 95       	ret
     458:	8a 30       	cpi	r24, 0x0A	; 10
     45a:	91 05       	cpc	r25, r1
     45c:	11 f4       	brne	.+4      	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
     45e:	28 9a       	sbi	0x05, 0	; 5
     460:	08 95       	ret
     462:	8b 30       	cpi	r24, 0x0B	; 11
     464:	91 05       	cpc	r25, r1
     466:	11 f4       	brne	.+4      	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
     468:	29 9a       	sbi	0x05, 1	; 5
     46a:	08 95       	ret
     46c:	8c 30       	cpi	r24, 0x0C	; 12
     46e:	91 05       	cpc	r25, r1
     470:	11 f4       	brne	.+4      	; 0x476 <__LOCK_REGION_LENGTH__+0x76>
     472:	2a 9a       	sbi	0x05, 2	; 5
     474:	08 95       	ret
     476:	8d 30       	cpi	r24, 0x0D	; 13
     478:	91 05       	cpc	r25, r1
     47a:	11 f4       	brne	.+4      	; 0x480 <__LOCK_REGION_LENGTH__+0x80>
     47c:	2b 9a       	sbi	0x05, 3	; 5
     47e:	08 95       	ret
     480:	8e 30       	cpi	r24, 0x0E	; 14
     482:	91 05       	cpc	r25, r1
     484:	11 f4       	brne	.+4      	; 0x48a <__LOCK_REGION_LENGTH__+0x8a>
     486:	2c 9a       	sbi	0x05, 4	; 5
     488:	08 95       	ret
     48a:	8f 30       	cpi	r24, 0x0F	; 15
     48c:	91 05       	cpc	r25, r1
     48e:	11 f4       	brne	.+4      	; 0x494 <__LOCK_REGION_LENGTH__+0x94>
     490:	2d 9a       	sbi	0x05, 5	; 5
     492:	08 95       	ret
     494:	80 31       	cpi	r24, 0x10	; 16
     496:	91 05       	cpc	r25, r1
     498:	11 f4       	brne	.+4      	; 0x49e <__LOCK_REGION_LENGTH__+0x9e>
     49a:	2e 9a       	sbi	0x05, 6	; 5
     49c:	08 95       	ret
     49e:	81 31       	cpi	r24, 0x11	; 17
     4a0:	91 05       	cpc	r25, r1
     4a2:	11 f4       	brne	.+4      	; 0x4a8 <__LOCK_REGION_LENGTH__+0xa8>
     4a4:	2f 9a       	sbi	0x05, 7	; 5
     4a6:	08 95       	ret
     4a8:	84 31       	cpi	r24, 0x14	; 20
     4aa:	91 05       	cpc	r25, r1
     4ac:	11 f4       	brne	.+4      	; 0x4b2 <__LOCK_REGION_LENGTH__+0xb2>
     4ae:	40 9a       	sbi	0x08, 0	; 8
     4b0:	08 95       	ret
     4b2:	85 31       	cpi	r24, 0x15	; 21
     4b4:	91 05       	cpc	r25, r1
     4b6:	11 f4       	brne	.+4      	; 0x4bc <__LOCK_REGION_LENGTH__+0xbc>
     4b8:	41 9a       	sbi	0x08, 1	; 8
     4ba:	08 95       	ret
     4bc:	86 31       	cpi	r24, 0x16	; 22
     4be:	91 05       	cpc	r25, r1
     4c0:	11 f4       	brne	.+4      	; 0x4c6 <__LOCK_REGION_LENGTH__+0xc6>
     4c2:	42 9a       	sbi	0x08, 2	; 8
     4c4:	08 95       	ret
     4c6:	87 31       	cpi	r24, 0x17	; 23
     4c8:	91 05       	cpc	r25, r1
     4ca:	11 f4       	brne	.+4      	; 0x4d0 <__LOCK_REGION_LENGTH__+0xd0>
     4cc:	43 9a       	sbi	0x08, 3	; 8
     4ce:	08 95       	ret
     4d0:	88 31       	cpi	r24, 0x18	; 24
     4d2:	91 05       	cpc	r25, r1
     4d4:	11 f4       	brne	.+4      	; 0x4da <__LOCK_REGION_LENGTH__+0xda>
     4d6:	44 9a       	sbi	0x08, 4	; 8
     4d8:	08 95       	ret
     4da:	89 31       	cpi	r24, 0x19	; 25
     4dc:	91 05       	cpc	r25, r1
     4de:	11 f4       	brne	.+4      	; 0x4e4 <__LOCK_REGION_LENGTH__+0xe4>
     4e0:	45 9a       	sbi	0x08, 5	; 8
     4e2:	08 95       	ret
     4e4:	8a 31       	cpi	r24, 0x1A	; 26
     4e6:	91 05       	cpc	r25, r1
     4e8:	11 f4       	brne	.+4      	; 0x4ee <__LOCK_REGION_LENGTH__+0xee>
     4ea:	46 9a       	sbi	0x08, 6	; 8
     4ec:	08 95       	ret
     4ee:	8e 31       	cpi	r24, 0x1E	; 30
     4f0:	91 05       	cpc	r25, r1
     4f2:	11 f4       	brne	.+4      	; 0x4f8 <__LOCK_REGION_LENGTH__+0xf8>
     4f4:	58 9a       	sbi	0x0b, 0	; 11
     4f6:	08 95       	ret
     4f8:	8f 31       	cpi	r24, 0x1F	; 31
     4fa:	91 05       	cpc	r25, r1
     4fc:	11 f4       	brne	.+4      	; 0x502 <__LOCK_REGION_LENGTH__+0x102>
     4fe:	59 9a       	sbi	0x0b, 1	; 11
     500:	08 95       	ret
     502:	80 32       	cpi	r24, 0x20	; 32
     504:	91 05       	cpc	r25, r1
     506:	11 f4       	brne	.+4      	; 0x50c <__LOCK_REGION_LENGTH__+0x10c>
     508:	5a 9a       	sbi	0x0b, 2	; 11
     50a:	08 95       	ret
     50c:	81 32       	cpi	r24, 0x21	; 33
     50e:	91 05       	cpc	r25, r1
     510:	11 f4       	brne	.+4      	; 0x516 <__LOCK_REGION_LENGTH__+0x116>
     512:	5b 9a       	sbi	0x0b, 3	; 11
     514:	08 95       	ret
     516:	82 32       	cpi	r24, 0x22	; 34
     518:	91 05       	cpc	r25, r1
     51a:	11 f4       	brne	.+4      	; 0x520 <__LOCK_REGION_LENGTH__+0x120>
     51c:	5c 9a       	sbi	0x0b, 4	; 11
     51e:	08 95       	ret
     520:	83 32       	cpi	r24, 0x23	; 35
     522:	91 05       	cpc	r25, r1
     524:	11 f4       	brne	.+4      	; 0x52a <__LOCK_REGION_LENGTH__+0x12a>
     526:	5d 9a       	sbi	0x0b, 5	; 11
     528:	08 95       	ret
     52a:	84 32       	cpi	r24, 0x24	; 36
     52c:	91 05       	cpc	r25, r1
     52e:	11 f4       	brne	.+4      	; 0x534 <__LOCK_REGION_LENGTH__+0x134>
     530:	5e 9a       	sbi	0x0b, 6	; 11
     532:	08 95       	ret
     534:	85 97       	sbiw	r24, 0x25	; 37
     536:	09 f4       	brne	.+2      	; 0x53a <__LOCK_REGION_LENGTH__+0x13a>
     538:	5f 9a       	sbi	0x0b, 7	; 11
     53a:	08 95       	ret

0000053c <Lcd8_Port>:
     53c:	cf 93       	push	r28
     53e:	c8 2f       	mov	r28, r24
     540:	80 ff       	sbrs	r24, 0
     542:	07 c0       	rjmp	.+14     	; 0x552 <Lcd8_Port+0x16>
     544:	61 e0       	ldi	r22, 0x01	; 1
     546:	70 e0       	ldi	r23, 0x00	; 0
     548:	83 e2       	ldi	r24, 0x23	; 35
     54a:	90 e0       	ldi	r25, 0x00	; 0
     54c:	0e 94 b6 01 	call	0x36c	; 0x36c <pinChange>
     550:	06 c0       	rjmp	.+12     	; 0x55e <Lcd8_Port+0x22>
     552:	60 e0       	ldi	r22, 0x00	; 0
     554:	70 e0       	ldi	r23, 0x00	; 0
     556:	83 e2       	ldi	r24, 0x23	; 35
     558:	90 e0       	ldi	r25, 0x00	; 0
     55a:	0e 94 b6 01 	call	0x36c	; 0x36c <pinChange>
     55e:	c1 ff       	sbrs	r28, 1
     560:	07 c0       	rjmp	.+14     	; 0x570 <Lcd8_Port+0x34>
     562:	61 e0       	ldi	r22, 0x01	; 1
     564:	70 e0       	ldi	r23, 0x00	; 0
     566:	84 e2       	ldi	r24, 0x24	; 36
     568:	90 e0       	ldi	r25, 0x00	; 0
     56a:	0e 94 b6 01 	call	0x36c	; 0x36c <pinChange>
     56e:	06 c0       	rjmp	.+12     	; 0x57c <Lcd8_Port+0x40>
     570:	60 e0       	ldi	r22, 0x00	; 0
     572:	70 e0       	ldi	r23, 0x00	; 0
     574:	84 e2       	ldi	r24, 0x24	; 36
     576:	90 e0       	ldi	r25, 0x00	; 0
     578:	0e 94 b6 01 	call	0x36c	; 0x36c <pinChange>
     57c:	c2 ff       	sbrs	r28, 2
     57e:	07 c0       	rjmp	.+14     	; 0x58e <Lcd8_Port+0x52>
     580:	61 e0       	ldi	r22, 0x01	; 1
     582:	70 e0       	ldi	r23, 0x00	; 0
     584:	85 e2       	ldi	r24, 0x25	; 37
     586:	90 e0       	ldi	r25, 0x00	; 0
     588:	0e 94 b6 01 	call	0x36c	; 0x36c <pinChange>
     58c:	06 c0       	rjmp	.+12     	; 0x59a <Lcd8_Port+0x5e>
     58e:	60 e0       	ldi	r22, 0x00	; 0
     590:	70 e0       	ldi	r23, 0x00	; 0
     592:	85 e2       	ldi	r24, 0x25	; 37
     594:	90 e0       	ldi	r25, 0x00	; 0
     596:	0e 94 b6 01 	call	0x36c	; 0x36c <pinChange>
     59a:	c3 ff       	sbrs	r28, 3
     59c:	07 c0       	rjmp	.+14     	; 0x5ac <Lcd8_Port+0x70>
     59e:	61 e0       	ldi	r22, 0x01	; 1
     5a0:	70 e0       	ldi	r23, 0x00	; 0
     5a2:	8a e0       	ldi	r24, 0x0A	; 10
     5a4:	90 e0       	ldi	r25, 0x00	; 0
     5a6:	0e 94 b6 01 	call	0x36c	; 0x36c <pinChange>
     5aa:	06 c0       	rjmp	.+12     	; 0x5b8 <Lcd8_Port+0x7c>
     5ac:	60 e0       	ldi	r22, 0x00	; 0
     5ae:	70 e0       	ldi	r23, 0x00	; 0
     5b0:	8a e0       	ldi	r24, 0x0A	; 10
     5b2:	90 e0       	ldi	r25, 0x00	; 0
     5b4:	0e 94 b6 01 	call	0x36c	; 0x36c <pinChange>
     5b8:	c4 ff       	sbrs	r28, 4
     5ba:	07 c0       	rjmp	.+14     	; 0x5ca <Lcd8_Port+0x8e>
     5bc:	61 e0       	ldi	r22, 0x01	; 1
     5be:	70 e0       	ldi	r23, 0x00	; 0
     5c0:	8b e0       	ldi	r24, 0x0B	; 11
     5c2:	90 e0       	ldi	r25, 0x00	; 0
     5c4:	0e 94 b6 01 	call	0x36c	; 0x36c <pinChange>
     5c8:	06 c0       	rjmp	.+12     	; 0x5d6 <Lcd8_Port+0x9a>
     5ca:	60 e0       	ldi	r22, 0x00	; 0
     5cc:	70 e0       	ldi	r23, 0x00	; 0
     5ce:	8b e0       	ldi	r24, 0x0B	; 11
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	0e 94 b6 01 	call	0x36c	; 0x36c <pinChange>
     5d6:	c5 ff       	sbrs	r28, 5
     5d8:	07 c0       	rjmp	.+14     	; 0x5e8 <Lcd8_Port+0xac>
     5da:	61 e0       	ldi	r22, 0x01	; 1
     5dc:	70 e0       	ldi	r23, 0x00	; 0
     5de:	8c e0       	ldi	r24, 0x0C	; 12
     5e0:	90 e0       	ldi	r25, 0x00	; 0
     5e2:	0e 94 b6 01 	call	0x36c	; 0x36c <pinChange>
     5e6:	06 c0       	rjmp	.+12     	; 0x5f4 <Lcd8_Port+0xb8>
     5e8:	60 e0       	ldi	r22, 0x00	; 0
     5ea:	70 e0       	ldi	r23, 0x00	; 0
     5ec:	8c e0       	ldi	r24, 0x0C	; 12
     5ee:	90 e0       	ldi	r25, 0x00	; 0
     5f0:	0e 94 b6 01 	call	0x36c	; 0x36c <pinChange>
     5f4:	c6 ff       	sbrs	r28, 6
     5f6:	07 c0       	rjmp	.+14     	; 0x606 <Lcd8_Port+0xca>
     5f8:	61 e0       	ldi	r22, 0x01	; 1
     5fa:	70 e0       	ldi	r23, 0x00	; 0
     5fc:	8d e0       	ldi	r24, 0x0D	; 13
     5fe:	90 e0       	ldi	r25, 0x00	; 0
     600:	0e 94 b6 01 	call	0x36c	; 0x36c <pinChange>
     604:	06 c0       	rjmp	.+12     	; 0x612 <Lcd8_Port+0xd6>
     606:	60 e0       	ldi	r22, 0x00	; 0
     608:	70 e0       	ldi	r23, 0x00	; 0
     60a:	8d e0       	ldi	r24, 0x0D	; 13
     60c:	90 e0       	ldi	r25, 0x00	; 0
     60e:	0e 94 b6 01 	call	0x36c	; 0x36c <pinChange>
     612:	cc 23       	and	r28, r28
     614:	3c f4       	brge	.+14     	; 0x624 <Lcd8_Port+0xe8>
     616:	61 e0       	ldi	r22, 0x01	; 1
     618:	70 e0       	ldi	r23, 0x00	; 0
     61a:	8f e0       	ldi	r24, 0x0F	; 15
     61c:	90 e0       	ldi	r25, 0x00	; 0
     61e:	0e 94 b6 01 	call	0x36c	; 0x36c <pinChange>
     622:	06 c0       	rjmp	.+12     	; 0x630 <Lcd8_Port+0xf4>
     624:	60 e0       	ldi	r22, 0x00	; 0
     626:	70 e0       	ldi	r23, 0x00	; 0
     628:	8f e0       	ldi	r24, 0x0F	; 15
     62a:	90 e0       	ldi	r25, 0x00	; 0
     62c:	0e 94 b6 01 	call	0x36c	; 0x36c <pinChange>
     630:	cf 91       	pop	r28
     632:	08 95       	ret

00000634 <Lcd8_Cmd>:
     634:	cf 93       	push	r28
     636:	c8 2f       	mov	r28, r24
     638:	60 e0       	ldi	r22, 0x00	; 0
     63a:	70 e0       	ldi	r23, 0x00	; 0
     63c:	8f e1       	ldi	r24, 0x1F	; 31
     63e:	90 e0       	ldi	r25, 0x00	; 0
     640:	0e 94 b6 01 	call	0x36c	; 0x36c <pinChange>
     644:	8c 2f       	mov	r24, r28
     646:	0e 94 9e 02 	call	0x53c	; 0x53c <Lcd8_Port>
     64a:	61 e0       	ldi	r22, 0x01	; 1
     64c:	70 e0       	ldi	r23, 0x00	; 0
     64e:	82 e2       	ldi	r24, 0x22	; 34
     650:	90 e0       	ldi	r25, 0x00	; 0
     652:	0e 94 b6 01 	call	0x36c	; 0x36c <pinChange>
     656:	8f e9       	ldi	r24, 0x9F	; 159
     658:	9f e0       	ldi	r25, 0x0F	; 15
     65a:	01 97       	sbiw	r24, 0x01	; 1
     65c:	f1 f7       	brne	.-4      	; 0x65a <Lcd8_Cmd+0x26>
     65e:	00 c0       	rjmp	.+0      	; 0x660 <Lcd8_Cmd+0x2c>
     660:	00 00       	nop
     662:	60 e0       	ldi	r22, 0x00	; 0
     664:	70 e0       	ldi	r23, 0x00	; 0
     666:	82 e2       	ldi	r24, 0x22	; 34
     668:	90 e0       	ldi	r25, 0x00	; 0
     66a:	0e 94 b6 01 	call	0x36c	; 0x36c <pinChange>
     66e:	8f e9       	ldi	r24, 0x9F	; 159
     670:	9f e0       	ldi	r25, 0x0F	; 15
     672:	01 97       	sbiw	r24, 0x01	; 1
     674:	f1 f7       	brne	.-4      	; 0x672 <Lcd8_Cmd+0x3e>
     676:	00 c0       	rjmp	.+0      	; 0x678 <Lcd8_Cmd+0x44>
     678:	00 00       	nop
     67a:	cf 91       	pop	r28
     67c:	08 95       	ret

0000067e <Lcd8_Clear>:
     67e:	81 e0       	ldi	r24, 0x01	; 1
     680:	0e 94 1a 03 	call	0x634	; 0x634 <Lcd8_Cmd>
     684:	08 95       	ret

00000686 <Lcd8_Init>:
     686:	60 e0       	ldi	r22, 0x00	; 0
     688:	70 e0       	ldi	r23, 0x00	; 0
     68a:	8f e1       	ldi	r24, 0x1F	; 31
     68c:	90 e0       	ldi	r25, 0x00	; 0
     68e:	0e 94 b6 01 	call	0x36c	; 0x36c <pinChange>
     692:	60 e0       	ldi	r22, 0x00	; 0
     694:	70 e0       	ldi	r23, 0x00	; 0
     696:	82 e2       	ldi	r24, 0x22	; 34
     698:	90 e0       	ldi	r25, 0x00	; 0
     69a:	0e 94 b6 01 	call	0x36c	; 0x36c <pinChange>
     69e:	2f ef       	ldi	r18, 0xFF	; 255
     6a0:	89 ef       	ldi	r24, 0xF9	; 249
     6a2:	90 e0       	ldi	r25, 0x00	; 0
     6a4:	21 50       	subi	r18, 0x01	; 1
     6a6:	80 40       	sbci	r24, 0x00	; 0
     6a8:	90 40       	sbci	r25, 0x00	; 0
     6aa:	e1 f7       	brne	.-8      	; 0x6a4 <Lcd8_Init+0x1e>
     6ac:	00 c0       	rjmp	.+0      	; 0x6ae <Lcd8_Init+0x28>
     6ae:	00 00       	nop
     6b0:	80 e3       	ldi	r24, 0x30	; 48
     6b2:	0e 94 1a 03 	call	0x634	; 0x634 <Lcd8_Cmd>
     6b6:	8f e1       	ldi	r24, 0x1F	; 31
     6b8:	9e e4       	ldi	r25, 0x4E	; 78
     6ba:	01 97       	sbiw	r24, 0x01	; 1
     6bc:	f1 f7       	brne	.-4      	; 0x6ba <Lcd8_Init+0x34>
     6be:	00 c0       	rjmp	.+0      	; 0x6c0 <Lcd8_Init+0x3a>
     6c0:	00 00       	nop
     6c2:	80 e3       	ldi	r24, 0x30	; 48
     6c4:	0e 94 1a 03 	call	0x634	; 0x634 <Lcd8_Cmd>
     6c8:	8f e9       	ldi	r24, 0x9F	; 159
     6ca:	9f e0       	ldi	r25, 0x0F	; 15
     6cc:	01 97       	sbiw	r24, 0x01	; 1
     6ce:	f1 f7       	brne	.-4      	; 0x6cc <Lcd8_Init+0x46>
     6d0:	00 c0       	rjmp	.+0      	; 0x6d2 <Lcd8_Init+0x4c>
     6d2:	00 00       	nop
     6d4:	80 e3       	ldi	r24, 0x30	; 48
     6d6:	0e 94 1a 03 	call	0x634	; 0x634 <Lcd8_Cmd>
     6da:	8f e3       	ldi	r24, 0x3F	; 63
     6dc:	9c e9       	ldi	r25, 0x9C	; 156
     6de:	01 97       	sbiw	r24, 0x01	; 1
     6e0:	f1 f7       	brne	.-4      	; 0x6de <Lcd8_Init+0x58>
     6e2:	00 c0       	rjmp	.+0      	; 0x6e4 <Lcd8_Init+0x5e>
     6e4:	00 00       	nop
     6e6:	88 e3       	ldi	r24, 0x38	; 56
     6e8:	0e 94 1a 03 	call	0x634	; 0x634 <Lcd8_Cmd>
     6ec:	8c e0       	ldi	r24, 0x0C	; 12
     6ee:	0e 94 1a 03 	call	0x634	; 0x634 <Lcd8_Cmd>
     6f2:	81 e0       	ldi	r24, 0x01	; 1
     6f4:	0e 94 1a 03 	call	0x634	; 0x634 <Lcd8_Cmd>
     6f8:	86 e0       	ldi	r24, 0x06	; 6
     6fa:	0e 94 1a 03 	call	0x634	; 0x634 <Lcd8_Cmd>
     6fe:	08 95       	ret

00000700 <Lcd8_Write_Char>:
     700:	cf 93       	push	r28
     702:	c8 2f       	mov	r28, r24
     704:	61 e0       	ldi	r22, 0x01	; 1
     706:	70 e0       	ldi	r23, 0x00	; 0
     708:	8f e1       	ldi	r24, 0x1F	; 31
     70a:	90 e0       	ldi	r25, 0x00	; 0
     70c:	0e 94 b6 01 	call	0x36c	; 0x36c <pinChange>
     710:	8c 2f       	mov	r24, r28
     712:	0e 94 9e 02 	call	0x53c	; 0x53c <Lcd8_Port>
     716:	61 e0       	ldi	r22, 0x01	; 1
     718:	70 e0       	ldi	r23, 0x00	; 0
     71a:	82 e2       	ldi	r24, 0x22	; 34
     71c:	90 e0       	ldi	r25, 0x00	; 0
     71e:	0e 94 b6 01 	call	0x36c	; 0x36c <pinChange>
     722:	8f e9       	ldi	r24, 0x9F	; 159
     724:	9f e0       	ldi	r25, 0x0F	; 15
     726:	01 97       	sbiw	r24, 0x01	; 1
     728:	f1 f7       	brne	.-4      	; 0x726 <Lcd8_Write_Char+0x26>
     72a:	00 c0       	rjmp	.+0      	; 0x72c <Lcd8_Write_Char+0x2c>
     72c:	00 00       	nop
     72e:	60 e0       	ldi	r22, 0x00	; 0
     730:	70 e0       	ldi	r23, 0x00	; 0
     732:	82 e2       	ldi	r24, 0x22	; 34
     734:	90 e0       	ldi	r25, 0x00	; 0
     736:	0e 94 b6 01 	call	0x36c	; 0x36c <pinChange>
     73a:	8f e9       	ldi	r24, 0x9F	; 159
     73c:	9f e0       	ldi	r25, 0x0F	; 15
     73e:	01 97       	sbiw	r24, 0x01	; 1
     740:	f1 f7       	brne	.-4      	; 0x73e <Lcd8_Write_Char+0x3e>
     742:	00 c0       	rjmp	.+0      	; 0x744 <Lcd8_Write_Char+0x44>
     744:	00 00       	nop
     746:	cf 91       	pop	r28
     748:	08 95       	ret

0000074a <Lcd8_Write_String>:
     74a:	cf 93       	push	r28
     74c:	df 93       	push	r29
     74e:	ec 01       	movw	r28, r24
     750:	88 81       	ld	r24, Y
     752:	88 23       	and	r24, r24
     754:	31 f0       	breq	.+12     	; 0x762 <Lcd8_Write_String+0x18>
     756:	21 96       	adiw	r28, 0x01	; 1
     758:	0e 94 80 03 	call	0x700	; 0x700 <Lcd8_Write_Char>
     75c:	89 91       	ld	r24, Y+
     75e:	81 11       	cpse	r24, r1
     760:	fb cf       	rjmp	.-10     	; 0x758 <Lcd8_Write_String+0xe>
     762:	df 91       	pop	r29
     764:	cf 91       	pop	r28
     766:	08 95       	ret

00000768 <freq_map_init>:
     768:	81 e1       	ldi	r24, 0x11	; 17
     76a:	e9 e5       	ldi	r30, 0x59	; 89
     76c:	f1 e0       	ldi	r31, 0x01	; 1
     76e:	a3 ea       	ldi	r26, 0xA3	; 163
     770:	b1 e0       	ldi	r27, 0x01	; 1
     772:	01 90       	ld	r0, Z+
     774:	0d 92       	st	X+, r0
     776:	8a 95       	dec	r24
     778:	e1 f7       	brne	.-8      	; 0x772 <freq_map_init+0xa>
     77a:	81 e1       	ldi	r24, 0x11	; 17
     77c:	e8 e4       	ldi	r30, 0x48	; 72
     77e:	f1 e0       	ldi	r31, 0x01	; 1
     780:	a4 eb       	ldi	r26, 0xB4	; 180
     782:	b1 e0       	ldi	r27, 0x01	; 1
     784:	01 90       	ld	r0, Z+
     786:	0d 92       	st	X+, r0
     788:	8a 95       	dec	r24
     78a:	e1 f7       	brne	.-8      	; 0x784 <freq_map_init+0x1c>
     78c:	81 e1       	ldi	r24, 0x11	; 17
     78e:	e7 e3       	ldi	r30, 0x37	; 55
     790:	f1 e0       	ldi	r31, 0x01	; 1
     792:	a5 ec       	ldi	r26, 0xC5	; 197
     794:	b1 e0       	ldi	r27, 0x01	; 1
     796:	01 90       	ld	r0, Z+
     798:	0d 92       	st	X+, r0
     79a:	8a 95       	dec	r24
     79c:	e1 f7       	brne	.-8      	; 0x796 <freq_map_init+0x2e>
     79e:	81 e1       	ldi	r24, 0x11	; 17
     7a0:	e6 e2       	ldi	r30, 0x26	; 38
     7a2:	f1 e0       	ldi	r31, 0x01	; 1
     7a4:	a6 ed       	ldi	r26, 0xD6	; 214
     7a6:	b1 e0       	ldi	r27, 0x01	; 1
     7a8:	01 90       	ld	r0, Z+
     7aa:	0d 92       	st	X+, r0
     7ac:	8a 95       	dec	r24
     7ae:	e1 f7       	brne	.-8      	; 0x7a8 <freq_map_init+0x40>
     7b0:	81 e1       	ldi	r24, 0x11	; 17
     7b2:	e5 e1       	ldi	r30, 0x15	; 21
     7b4:	f1 e0       	ldi	r31, 0x01	; 1
     7b6:	a7 ee       	ldi	r26, 0xE7	; 231
     7b8:	b1 e0       	ldi	r27, 0x01	; 1
     7ba:	01 90       	ld	r0, Z+
     7bc:	0d 92       	st	X+, r0
     7be:	8a 95       	dec	r24
     7c0:	e1 f7       	brne	.-8      	; 0x7ba <freq_map_init+0x52>
     7c2:	81 e1       	ldi	r24, 0x11	; 17
     7c4:	e4 e0       	ldi	r30, 0x04	; 4
     7c6:	f1 e0       	ldi	r31, 0x01	; 1
     7c8:	a8 ef       	ldi	r26, 0xF8	; 248
     7ca:	b1 e0       	ldi	r27, 0x01	; 1
     7cc:	01 90       	ld	r0, Z+
     7ce:	0d 92       	st	X+, r0
     7d0:	8a 95       	dec	r24
     7d2:	e1 f7       	brne	.-8      	; 0x7cc <freq_map_init+0x64>
     7d4:	08 95       	ret

000007d6 <freq_key_writer>:
     7d6:	1f 93       	push	r17
     7d8:	cf 93       	push	r28
     7da:	df 93       	push	r29
     7dc:	ec 01       	movw	r28, r24
     7de:	88 81       	ld	r24, Y
     7e0:	99 81       	ldd	r25, Y+1	; 0x01
     7e2:	86 30       	cpi	r24, 0x06	; 6
     7e4:	91 05       	cpc	r25, r1
     7e6:	1c f0       	brlt	.+6      	; 0x7ee <freq_key_writer+0x18>
     7e8:	19 82       	std	Y+1, r1	; 0x01
     7ea:	18 82       	st	Y, r1
     7ec:	06 c0       	rjmp	.+12     	; 0x7fa <freq_key_writer+0x24>
     7ee:	99 23       	and	r25, r25
     7f0:	24 f4       	brge	.+8      	; 0x7fa <freq_key_writer+0x24>
     7f2:	85 e0       	ldi	r24, 0x05	; 5
     7f4:	90 e0       	ldi	r25, 0x00	; 0
     7f6:	99 83       	std	Y+1, r25	; 0x01
     7f8:	88 83       	st	Y, r24
     7fa:	80 e8       	ldi	r24, 0x80	; 128
     7fc:	0e 94 1a 03 	call	0x634	; 0x634 <Lcd8_Cmd>
     800:	8a e6       	ldi	r24, 0x6A	; 106
     802:	91 e0       	ldi	r25, 0x01	; 1
     804:	0e 94 a5 03 	call	0x74a	; 0x74a <Lcd8_Write_String>
     808:	80 e8       	ldi	r24, 0x80	; 128
     80a:	0e 94 1a 03 	call	0x634	; 0x634 <Lcd8_Cmd>
     80e:	28 81       	ld	r18, Y
     810:	39 81       	ldd	r19, Y+1	; 0x01
     812:	11 e1       	ldi	r17, 0x11	; 17
     814:	12 9f       	mul	r17, r18
     816:	c0 01       	movw	r24, r0
     818:	13 9f       	mul	r17, r19
     81a:	90 0d       	add	r25, r0
     81c:	11 24       	eor	r1, r1
     81e:	8d 55       	subi	r24, 0x5D	; 93
     820:	9e 4f       	sbci	r25, 0xFE	; 254
     822:	0e 94 a5 03 	call	0x74a	; 0x74a <Lcd8_Write_String>
     826:	89 e8       	ldi	r24, 0x89	; 137
     828:	0e 94 1a 03 	call	0x634	; 0x634 <Lcd8_Cmd>
     82c:	28 81       	ld	r18, Y
     82e:	39 81       	ldd	r19, Y+1	; 0x01
     830:	12 9f       	mul	r17, r18
     832:	c0 01       	movw	r24, r0
     834:	13 9f       	mul	r17, r19
     836:	90 0d       	add	r25, r0
     838:	11 24       	eor	r1, r1
     83a:	84 55       	subi	r24, 0x54	; 84
     83c:	9e 4f       	sbci	r25, 0xFE	; 254
     83e:	0e 94 a5 03 	call	0x74a	; 0x74a <Lcd8_Write_String>
     842:	df 91       	pop	r29
     844:	cf 91       	pop	r28
     846:	1f 91       	pop	r17
     848:	08 95       	ret

0000084a <lcd_display_init>:
     84a:	8f ef       	ldi	r24, 0xFF	; 255
     84c:	84 b9       	out	0x04, r24	; 4
     84e:	8a b9       	out	0x0a, r24	; 10
     850:	0e 94 43 03 	call	0x686	; 0x686 <Lcd8_Init>
     854:	0e 94 b4 03 	call	0x768	; 0x768 <freq_map_init>
     858:	0e 94 3f 03 	call	0x67e	; 0x67e <Lcd8_Clear>
     85c:	80 e0       	ldi	r24, 0x00	; 0
     85e:	90 e0       	ldi	r25, 0x00	; 0
     860:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <freq_key_writer>
     864:	80 ec       	ldi	r24, 0xC0	; 192
     866:	0e 94 1a 03 	call	0x634	; 0x634 <Lcd8_Cmd>
     86a:	8b e7       	ldi	r24, 0x7B	; 123
     86c:	91 e0       	ldi	r25, 0x01	; 1
     86e:	0e 94 a5 03 	call	0x74a	; 0x74a <Lcd8_Write_String>
     872:	08 95       	ret

00000874 <draw_actual_frequency>:

void draw_actual_frequency(unsigned int target_frequency)
{			  
     874:	0f 93       	push	r16
     876:	1f 93       	push	r17
     878:	cf 93       	push	r28
     87a:	df 93       	push	r29
     87c:	00 d0       	rcall	.+0      	; 0x87e <draw_actual_frequency+0xa>
     87e:	00 d0       	rcall	.+0      	; 0x880 <draw_actual_frequency+0xc>
     880:	cd b7       	in	r28, 0x3d	; 61
     882:	de b7       	in	r29, 0x3e	; 62
     884:	18 2f       	mov	r17, r24
     886:	09 2f       	mov	r16, r25
void Lcd8_Set_Cursor(char a, char b)
{
	if(a == 1)
	Lcd8_Cmd(0x80 + b);
	else if(a == 2)
	Lcd8_Cmd(0xC0 + b);
     888:	89 ec       	ldi	r24, 0xC9	; 201
     88a:	0e 94 1a 03 	call	0x634	; 0x634 <Lcd8_Cmd>
	Lcd8_Set_Cursor(2,9);
	Lcd8_Write_String("       ");
     88e:	83 e7       	ldi	r24, 0x73	; 115
     890:	91 e0       	ldi	r25, 0x01	; 1
     892:	0e 94 a5 03 	call	0x74a	; 0x74a <Lcd8_Write_String>
	char target_freq_str[4];
	sprintf(target_freq_str,"%d",target_frequency);
     896:	0f 93       	push	r16
     898:	1f 93       	push	r17
     89a:	81 e8       	ldi	r24, 0x81	; 129
     89c:	91 e0       	ldi	r25, 0x01	; 1
     89e:	9f 93       	push	r25
     8a0:	8f 93       	push	r24
     8a2:	8e 01       	movw	r16, r28
     8a4:	0f 5f       	subi	r16, 0xFF	; 255
     8a6:	1f 4f       	sbci	r17, 0xFF	; 255
     8a8:	1f 93       	push	r17
     8aa:	0f 93       	push	r16
     8ac:	0e 94 d2 06 	call	0xda4	; 0xda4 <sprintf>
     8b0:	89 ec       	ldi	r24, 0xC9	; 201
     8b2:	0e 94 1a 03 	call	0x634	; 0x634 <Lcd8_Cmd>
	Lcd8_Set_Cursor(2,9);
	Lcd8_Write_String(target_freq_str);
     8b6:	c8 01       	movw	r24, r16
     8b8:	0e 94 a5 03 	call	0x74a	; 0x74a <Lcd8_Write_String>
     8bc:	0f 90       	pop	r0
     8be:	0f 90       	pop	r0
     8c0:	0f 90       	pop	r0
     8c2:	0f 90       	pop	r0
     8c4:	0f 90       	pop	r0
     8c6:	0f 90       	pop	r0
     8c8:	0f 90       	pop	r0
     8ca:	0f 90       	pop	r0
     8cc:	0f 90       	pop	r0
     8ce:	0f 90       	pop	r0
     8d0:	df 91       	pop	r29
     8d2:	cf 91       	pop	r28
     8d4:	1f 91       	pop	r17
     8d6:	0f 91       	pop	r16
     8d8:	08 95       	ret

000008da <previous_key_button_action>:
static int freq_key_index = 0;
button_debouncer_t next_key_button, previous_key_button;

static void previous_key_button_action()
{
	freq_key_index--;
     8da:	80 91 09 02 	lds	r24, 0x0209	; 0x800209 <freq_key_index>
     8de:	90 91 0a 02 	lds	r25, 0x020A	; 0x80020a <freq_key_index+0x1>
     8e2:	01 97       	sbiw	r24, 0x01	; 1
     8e4:	90 93 0a 02 	sts	0x020A, r25	; 0x80020a <freq_key_index+0x1>
     8e8:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <freq_key_index>
	freq_key_writer(&freq_key_index);	
     8ec:	89 e0       	ldi	r24, 0x09	; 9
     8ee:	92 e0       	ldi	r25, 0x02	; 2
     8f0:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <freq_key_writer>
     8f4:	08 95       	ret

000008f6 <next_key_button_action>:
}

static void next_key_button_action()
{
	freq_key_index++;
     8f6:	80 91 09 02 	lds	r24, 0x0209	; 0x800209 <freq_key_index>
     8fa:	90 91 0a 02 	lds	r25, 0x020A	; 0x80020a <freq_key_index+0x1>
     8fe:	01 96       	adiw	r24, 0x01	; 1
     900:	90 93 0a 02 	sts	0x020A, r25	; 0x80020a <freq_key_index+0x1>
     904:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <freq_key_index>
	freq_key_writer(&freq_key_index);
     908:	89 e0       	ldi	r24, 0x09	; 9
     90a:	92 e0       	ldi	r25, 0x02	; 2
     90c:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <freq_key_writer>
     910:	08 95       	ret

00000912 <main>:
}

int main(void)
{
     912:	cf 93       	push	r28
     914:	df 93       	push	r29
     916:	cd b7       	in	r28, 0x3d	; 61
     918:	de b7       	in	r29, 0x3e	; 62
     91a:	c0 55       	subi	r28, 0x50	; 80
     91c:	d1 09       	sbc	r29, r1
     91e:	0f b6       	in	r0, 0x3f	; 63
     920:	f8 94       	cli
     922:	de bf       	out	0x3e, r29	; 62
     924:	0f be       	out	0x3f, r0	; 63
     926:	cd bf       	out	0x3d, r28	; 61
	//USART_init();
	millis_init();
     928:	0e 94 6e 05 	call	0xadc	; 0xadc <millis_init>
	lcd_display_init();
     92c:	0e 94 25 04 	call	0x84a	; 0x84a <lcd_display_init>
	frequency_detector_init();
     930:	0e 94 82 00 	call	0x104	; 0x104 <frequency_detector_init>
	init_button_interrupts();
     934:	0e 94 53 00 	call	0xa6	; 0xa6 <init_button_interrupts>
	
	next_key_button.button_action = next_key_button_action;
     938:	8b e7       	ldi	r24, 0x7B	; 123
     93a:	94 e0       	ldi	r25, 0x04	; 4
     93c:	90 93 47 02 	sts	0x0247, r25	; 0x800247 <next_key_button+0x5>
     940:	80 93 46 02 	sts	0x0246, r24	; 0x800246 <next_key_button+0x4>
	previous_key_button.button_action = previous_key_button_action;
     944:	8d e6       	ldi	r24, 0x6D	; 109
     946:	94 e0       	ldi	r25, 0x04	; 4
     948:	90 93 4d 02 	sts	0x024D, r25	; 0x80024d <previous_key_button+0x5>
     94c:	80 93 4c 02 	sts	0x024C, r24	; 0x80024c <previous_key_button+0x4>
	
	sei();//enable interrupts
     950:	78 94       	sei
    while (1) 
    {
		if (new_frequency_detected()){
			  float frequency = get_frequency();//calculate frequency timer rate/period
			  char str[80];
			  sprintf(str, "Frequency = %d Hz\n", (int)frequency);
     952:	0f 2e       	mov	r0, r31
     954:	f4 e8       	ldi	r31, 0x84	; 132
     956:	ef 2e       	mov	r14, r31
     958:	f1 e0       	ldi	r31, 0x01	; 1
     95a:	ff 2e       	mov	r15, r31
     95c:	f0 2d       	mov	r31, r0
     95e:	ce 01       	movw	r24, r28
     960:	01 96       	adiw	r24, 0x01	; 1
     962:	6c 01       	movw	r12, r24
	
	sei();//enable interrupts

    while (1) 
    {
		if (new_frequency_detected()){
     964:	0e 94 9f 00 	call	0x13e	; 0x13e <new_frequency_detected>
     968:	88 23       	and	r24, r24
     96a:	c1 f0       	breq	.+48     	; 0x99c <main+0x8a>
			  float frequency = get_frequency();//calculate frequency timer rate/period
     96c:	0e 94 a8 00 	call	0x150	; 0x150 <get_frequency>
			  char str[80];
			  sprintf(str, "Frequency = %d Hz\n", (int)frequency);
     970:	0e 94 0e 06 	call	0xc1c	; 0xc1c <__fixsfsi>
     974:	06 2f       	mov	r16, r22
     976:	17 2f       	mov	r17, r23
     978:	7f 93       	push	r23
     97a:	6f 93       	push	r22
     97c:	ff 92       	push	r15
     97e:	ef 92       	push	r14
     980:	df 92       	push	r13
     982:	cf 92       	push	r12
     984:	0e 94 d2 06 	call	0xda4	; 0xda4 <sprintf>
			  draw_actual_frequency((int)frequency);
     988:	80 2f       	mov	r24, r16
     98a:	91 2f       	mov	r25, r17
     98c:	0e 94 3a 04 	call	0x874	; 0x874 <draw_actual_frequency>
     990:	0f 90       	pop	r0
     992:	0f 90       	pop	r0
     994:	0f 90       	pop	r0
     996:	0f 90       	pop	r0
     998:	0f 90       	pop	r0
     99a:	0f 90       	pop	r0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     99c:	9f ef       	ldi	r25, 0xFF	; 255
     99e:	29 e6       	ldi	r18, 0x69	; 105
     9a0:	88 e1       	ldi	r24, 0x18	; 24
     9a2:	91 50       	subi	r25, 0x01	; 1
     9a4:	20 40       	sbci	r18, 0x00	; 0
     9a6:	80 40       	sbci	r24, 0x00	; 0
     9a8:	e1 f7       	brne	.-8      	; 0x9a2 <main+0x90>
     9aa:	00 c0       	rjmp	.+0      	; 0x9ac <main+0x9a>
     9ac:	00 00       	nop
     9ae:	da cf       	rjmp	.-76     	; 0x964 <main+0x52>

000009b0 <__vector_21>:
    }
}

//when new ADC value ready
ISR(ADC_vect) 
{
     9b0:	1f 92       	push	r1
     9b2:	0f 92       	push	r0
     9b4:	0f b6       	in	r0, 0x3f	; 63
     9b6:	0f 92       	push	r0
     9b8:	11 24       	eor	r1, r1
     9ba:	2f 93       	push	r18
     9bc:	3f 93       	push	r19
     9be:	4f 93       	push	r20
     9c0:	5f 93       	push	r21
     9c2:	6f 93       	push	r22
     9c4:	7f 93       	push	r23
     9c6:	8f 93       	push	r24
     9c8:	9f 93       	push	r25
     9ca:	af 93       	push	r26
     9cc:	bf 93       	push	r27
     9ce:	ef 93       	push	r30
     9d0:	ff 93       	push	r31
	frequency_detector_update(ADCH);
     9d2:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
     9d6:	0e 94 b9 00 	call	0x172	; 0x172 <frequency_detector_update>
}
     9da:	ff 91       	pop	r31
     9dc:	ef 91       	pop	r30
     9de:	bf 91       	pop	r27
     9e0:	af 91       	pop	r26
     9e2:	9f 91       	pop	r25
     9e4:	8f 91       	pop	r24
     9e6:	7f 91       	pop	r23
     9e8:	6f 91       	pop	r22
     9ea:	5f 91       	pop	r21
     9ec:	4f 91       	pop	r20
     9ee:	3f 91       	pop	r19
     9f0:	2f 91       	pop	r18
     9f2:	0f 90       	pop	r0
     9f4:	0f be       	out	0x3f, r0	; 63
     9f6:	0f 90       	pop	r0
     9f8:	1f 90       	pop	r1
     9fa:	18 95       	reti

000009fc <__vector_1>:

ISR(INT0_vect) //ISR for external interrupt 0
{
     9fc:	1f 92       	push	r1
     9fe:	0f 92       	push	r0
     a00:	0f b6       	in	r0, 0x3f	; 63
     a02:	0f 92       	push	r0
     a04:	11 24       	eor	r1, r1
     a06:	2f 93       	push	r18
     a08:	3f 93       	push	r19
     a0a:	4f 93       	push	r20
     a0c:	5f 93       	push	r21
     a0e:	6f 93       	push	r22
     a10:	7f 93       	push	r23
     a12:	8f 93       	push	r24
     a14:	9f 93       	push	r25
     a16:	af 93       	push	r26
     a18:	bf 93       	push	r27
     a1a:	ef 93       	push	r30
     a1c:	ff 93       	push	r31
	debounce_button(&next_key_button);
     a1e:	82 e4       	ldi	r24, 0x42	; 66
     a20:	92 e0       	ldi	r25, 0x02	; 2
     a22:	0e 94 5a 00 	call	0xb4	; 0xb4 <debounce_button>
}
     a26:	ff 91       	pop	r31
     a28:	ef 91       	pop	r30
     a2a:	bf 91       	pop	r27
     a2c:	af 91       	pop	r26
     a2e:	9f 91       	pop	r25
     a30:	8f 91       	pop	r24
     a32:	7f 91       	pop	r23
     a34:	6f 91       	pop	r22
     a36:	5f 91       	pop	r21
     a38:	4f 91       	pop	r20
     a3a:	3f 91       	pop	r19
     a3c:	2f 91       	pop	r18
     a3e:	0f 90       	pop	r0
     a40:	0f be       	out	0x3f, r0	; 63
     a42:	0f 90       	pop	r0
     a44:	1f 90       	pop	r1
     a46:	18 95       	reti

00000a48 <__vector_2>:

//code for changing motor speed with button
//it's commented because motor speed is being controlled with potentiometer
ISR(INT1_vect)
{
     a48:	1f 92       	push	r1
     a4a:	0f 92       	push	r0
     a4c:	0f b6       	in	r0, 0x3f	; 63
     a4e:	0f 92       	push	r0
     a50:	11 24       	eor	r1, r1
     a52:	2f 93       	push	r18
     a54:	3f 93       	push	r19
     a56:	4f 93       	push	r20
     a58:	5f 93       	push	r21
     a5a:	6f 93       	push	r22
     a5c:	7f 93       	push	r23
     a5e:	8f 93       	push	r24
     a60:	9f 93       	push	r25
     a62:	af 93       	push	r26
     a64:	bf 93       	push	r27
     a66:	ef 93       	push	r30
     a68:	ff 93       	push	r31
	debounce_button(&previous_key_button);
     a6a:	88 e4       	ldi	r24, 0x48	; 72
     a6c:	92 e0       	ldi	r25, 0x02	; 2
     a6e:	0e 94 5a 00 	call	0xb4	; 0xb4 <debounce_button>
}
     a72:	ff 91       	pop	r31
     a74:	ef 91       	pop	r30
     a76:	bf 91       	pop	r27
     a78:	af 91       	pop	r26
     a7a:	9f 91       	pop	r25
     a7c:	8f 91       	pop	r24
     a7e:	7f 91       	pop	r23
     a80:	6f 91       	pop	r22
     a82:	5f 91       	pop	r21
     a84:	4f 91       	pop	r20
     a86:	3f 91       	pop	r19
     a88:	2f 91       	pop	r18
     a8a:	0f 90       	pop	r0
     a8c:	0f be       	out	0x3f, r0	; 63
     a8e:	0f 90       	pop	r0
     a90:	1f 90       	pop	r1
     a92:	18 95       	reti

00000a94 <__vector_14>:

ISR(TIMER0_COMPA_vect)
{
     a94:	1f 92       	push	r1
     a96:	0f 92       	push	r0
     a98:	0f b6       	in	r0, 0x3f	; 63
     a9a:	0f 92       	push	r0
     a9c:	11 24       	eor	r1, r1
     a9e:	2f 93       	push	r18
     aa0:	3f 93       	push	r19
     aa2:	4f 93       	push	r20
     aa4:	5f 93       	push	r21
     aa6:	6f 93       	push	r22
     aa8:	7f 93       	push	r23
     aaa:	8f 93       	push	r24
     aac:	9f 93       	push	r25
     aae:	af 93       	push	r26
     ab0:	bf 93       	push	r27
     ab2:	ef 93       	push	r30
     ab4:	ff 93       	push	r31
	update_millis();
     ab6:	0e 94 88 05 	call	0xb10	; 0xb10 <update_millis>
}
     aba:	ff 91       	pop	r31
     abc:	ef 91       	pop	r30
     abe:	bf 91       	pop	r27
     ac0:	af 91       	pop	r26
     ac2:	9f 91       	pop	r25
     ac4:	8f 91       	pop	r24
     ac6:	7f 91       	pop	r23
     ac8:	6f 91       	pop	r22
     aca:	5f 91       	pop	r21
     acc:	4f 91       	pop	r20
     ace:	3f 91       	pop	r19
     ad0:	2f 91       	pop	r18
     ad2:	0f 90       	pop	r0
     ad4:	0f be       	out	0x3f, r0	; 63
     ad6:	0f 90       	pop	r0
     ad8:	1f 90       	pop	r1
     ada:	18 95       	reti

00000adc <millis_init>:

static unsigned long millis_value = 0;

void millis_init()
{
	TCCR0A |= (1 << WGM01);
     adc:	84 b5       	in	r24, 0x24	; 36
     ade:	82 60       	ori	r24, 0x02	; 2
     ae0:	84 bd       	out	0x24, r24	; 36
	TCNT0 = 0x00;
     ae2:	16 bc       	out	0x26, r1	; 38
	//TIFR0 |= (1 << OCF0A);
	OCR0A = 0xF9;
     ae4:	89 ef       	ldi	r24, 0xF9	; 249
     ae6:	87 bd       	out	0x27, r24	; 39
	TCCR0B |= (1 << CS00) | (1 << CS01);
     ae8:	85 b5       	in	r24, 0x25	; 37
     aea:	83 60       	ori	r24, 0x03	; 3
     aec:	85 bd       	out	0x25, r24	; 37
	TIMSK0 |= (1 << OCIE0A);    //Set the ISR COMPA vect
     aee:	ee e6       	ldi	r30, 0x6E	; 110
     af0:	f0 e0       	ldi	r31, 0x00	; 0
     af2:	80 81       	ld	r24, Z
     af4:	82 60       	ori	r24, 0x02	; 2
     af6:	80 83       	st	Z, r24
     af8:	08 95       	ret

00000afa <millis>:
}

unsigned long millis()
{
	unsigned long value;
	cli();
     afa:	f8 94       	cli
	value = millis_value;
     afc:	60 91 0b 02 	lds	r22, 0x020B	; 0x80020b <millis_value>
     b00:	70 91 0c 02 	lds	r23, 0x020C	; 0x80020c <millis_value+0x1>
     b04:	80 91 0d 02 	lds	r24, 0x020D	; 0x80020d <millis_value+0x2>
     b08:	90 91 0e 02 	lds	r25, 0x020E	; 0x80020e <millis_value+0x3>
	sei();
     b0c:	78 94       	sei
	return value;
}
     b0e:	08 95       	ret

00000b10 <update_millis>:

void update_millis()
{
	millis_value++;
     b10:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <millis_value>
     b14:	90 91 0c 02 	lds	r25, 0x020C	; 0x80020c <millis_value+0x1>
     b18:	a0 91 0d 02 	lds	r26, 0x020D	; 0x80020d <millis_value+0x2>
     b1c:	b0 91 0e 02 	lds	r27, 0x020E	; 0x80020e <millis_value+0x3>
     b20:	01 96       	adiw	r24, 0x01	; 1
     b22:	a1 1d       	adc	r26, r1
     b24:	b1 1d       	adc	r27, r1
     b26:	80 93 0b 02 	sts	0x020B, r24	; 0x80020b <millis_value>
     b2a:	90 93 0c 02 	sts	0x020C, r25	; 0x80020c <millis_value+0x1>
     b2e:	a0 93 0d 02 	sts	0x020D, r26	; 0x80020d <millis_value+0x2>
     b32:	b0 93 0e 02 	sts	0x020E, r27	; 0x80020e <millis_value+0x3>
     b36:	08 95       	ret

00000b38 <__divsf3>:
     b38:	0e 94 b0 05 	call	0xb60	; 0xb60 <__divsf3x>
     b3c:	0c 94 98 06 	jmp	0xd30	; 0xd30 <__fp_round>
     b40:	0e 94 91 06 	call	0xd22	; 0xd22 <__fp_pscB>
     b44:	58 f0       	brcs	.+22     	; 0xb5c <__divsf3+0x24>
     b46:	0e 94 8a 06 	call	0xd14	; 0xd14 <__fp_pscA>
     b4a:	40 f0       	brcs	.+16     	; 0xb5c <__divsf3+0x24>
     b4c:	29 f4       	brne	.+10     	; 0xb58 <__divsf3+0x20>
     b4e:	5f 3f       	cpi	r21, 0xFF	; 255
     b50:	29 f0       	breq	.+10     	; 0xb5c <__divsf3+0x24>
     b52:	0c 94 81 06 	jmp	0xd02	; 0xd02 <__fp_inf>
     b56:	51 11       	cpse	r21, r1
     b58:	0c 94 cc 06 	jmp	0xd98	; 0xd98 <__fp_szero>
     b5c:	0c 94 87 06 	jmp	0xd0e	; 0xd0e <__fp_nan>

00000b60 <__divsf3x>:
     b60:	0e 94 a9 06 	call	0xd52	; 0xd52 <__fp_split3>
     b64:	68 f3       	brcs	.-38     	; 0xb40 <__divsf3+0x8>

00000b66 <__divsf3_pse>:
     b66:	99 23       	and	r25, r25
     b68:	b1 f3       	breq	.-20     	; 0xb56 <__divsf3+0x1e>
     b6a:	55 23       	and	r21, r21
     b6c:	91 f3       	breq	.-28     	; 0xb52 <__divsf3+0x1a>
     b6e:	95 1b       	sub	r25, r21
     b70:	55 0b       	sbc	r21, r21
     b72:	bb 27       	eor	r27, r27
     b74:	aa 27       	eor	r26, r26
     b76:	62 17       	cp	r22, r18
     b78:	73 07       	cpc	r23, r19
     b7a:	84 07       	cpc	r24, r20
     b7c:	38 f0       	brcs	.+14     	; 0xb8c <__divsf3_pse+0x26>
     b7e:	9f 5f       	subi	r25, 0xFF	; 255
     b80:	5f 4f       	sbci	r21, 0xFF	; 255
     b82:	22 0f       	add	r18, r18
     b84:	33 1f       	adc	r19, r19
     b86:	44 1f       	adc	r20, r20
     b88:	aa 1f       	adc	r26, r26
     b8a:	a9 f3       	breq	.-22     	; 0xb76 <__divsf3_pse+0x10>
     b8c:	35 d0       	rcall	.+106    	; 0xbf8 <__divsf3_pse+0x92>
     b8e:	0e 2e       	mov	r0, r30
     b90:	3a f0       	brmi	.+14     	; 0xba0 <__divsf3_pse+0x3a>
     b92:	e0 e8       	ldi	r30, 0x80	; 128
     b94:	32 d0       	rcall	.+100    	; 0xbfa <__divsf3_pse+0x94>
     b96:	91 50       	subi	r25, 0x01	; 1
     b98:	50 40       	sbci	r21, 0x00	; 0
     b9a:	e6 95       	lsr	r30
     b9c:	00 1c       	adc	r0, r0
     b9e:	ca f7       	brpl	.-14     	; 0xb92 <__divsf3_pse+0x2c>
     ba0:	2b d0       	rcall	.+86     	; 0xbf8 <__divsf3_pse+0x92>
     ba2:	fe 2f       	mov	r31, r30
     ba4:	29 d0       	rcall	.+82     	; 0xbf8 <__divsf3_pse+0x92>
     ba6:	66 0f       	add	r22, r22
     ba8:	77 1f       	adc	r23, r23
     baa:	88 1f       	adc	r24, r24
     bac:	bb 1f       	adc	r27, r27
     bae:	26 17       	cp	r18, r22
     bb0:	37 07       	cpc	r19, r23
     bb2:	48 07       	cpc	r20, r24
     bb4:	ab 07       	cpc	r26, r27
     bb6:	b0 e8       	ldi	r27, 0x80	; 128
     bb8:	09 f0       	breq	.+2      	; 0xbbc <__divsf3_pse+0x56>
     bba:	bb 0b       	sbc	r27, r27
     bbc:	80 2d       	mov	r24, r0
     bbe:	bf 01       	movw	r22, r30
     bc0:	ff 27       	eor	r31, r31
     bc2:	93 58       	subi	r25, 0x83	; 131
     bc4:	5f 4f       	sbci	r21, 0xFF	; 255
     bc6:	3a f0       	brmi	.+14     	; 0xbd6 <__divsf3_pse+0x70>
     bc8:	9e 3f       	cpi	r25, 0xFE	; 254
     bca:	51 05       	cpc	r21, r1
     bcc:	78 f0       	brcs	.+30     	; 0xbec <__divsf3_pse+0x86>
     bce:	0c 94 81 06 	jmp	0xd02	; 0xd02 <__fp_inf>
     bd2:	0c 94 cc 06 	jmp	0xd98	; 0xd98 <__fp_szero>
     bd6:	5f 3f       	cpi	r21, 0xFF	; 255
     bd8:	e4 f3       	brlt	.-8      	; 0xbd2 <__divsf3_pse+0x6c>
     bda:	98 3e       	cpi	r25, 0xE8	; 232
     bdc:	d4 f3       	brlt	.-12     	; 0xbd2 <__divsf3_pse+0x6c>
     bde:	86 95       	lsr	r24
     be0:	77 95       	ror	r23
     be2:	67 95       	ror	r22
     be4:	b7 95       	ror	r27
     be6:	f7 95       	ror	r31
     be8:	9f 5f       	subi	r25, 0xFF	; 255
     bea:	c9 f7       	brne	.-14     	; 0xbde <__divsf3_pse+0x78>
     bec:	88 0f       	add	r24, r24
     bee:	91 1d       	adc	r25, r1
     bf0:	96 95       	lsr	r25
     bf2:	87 95       	ror	r24
     bf4:	97 f9       	bld	r25, 7
     bf6:	08 95       	ret
     bf8:	e1 e0       	ldi	r30, 0x01	; 1
     bfa:	66 0f       	add	r22, r22
     bfc:	77 1f       	adc	r23, r23
     bfe:	88 1f       	adc	r24, r24
     c00:	bb 1f       	adc	r27, r27
     c02:	62 17       	cp	r22, r18
     c04:	73 07       	cpc	r23, r19
     c06:	84 07       	cpc	r24, r20
     c08:	ba 07       	cpc	r27, r26
     c0a:	20 f0       	brcs	.+8      	; 0xc14 <__divsf3_pse+0xae>
     c0c:	62 1b       	sub	r22, r18
     c0e:	73 0b       	sbc	r23, r19
     c10:	84 0b       	sbc	r24, r20
     c12:	ba 0b       	sbc	r27, r26
     c14:	ee 1f       	adc	r30, r30
     c16:	88 f7       	brcc	.-30     	; 0xbfa <__divsf3_pse+0x94>
     c18:	e0 95       	com	r30
     c1a:	08 95       	ret

00000c1c <__fixsfsi>:
     c1c:	0e 94 15 06 	call	0xc2a	; 0xc2a <__fixunssfsi>
     c20:	68 94       	set
     c22:	b1 11       	cpse	r27, r1
     c24:	0c 94 cc 06 	jmp	0xd98	; 0xd98 <__fp_szero>
     c28:	08 95       	ret

00000c2a <__fixunssfsi>:
     c2a:	0e 94 b1 06 	call	0xd62	; 0xd62 <__fp_splitA>
     c2e:	88 f0       	brcs	.+34     	; 0xc52 <__fixunssfsi+0x28>
     c30:	9f 57       	subi	r25, 0x7F	; 127
     c32:	98 f0       	brcs	.+38     	; 0xc5a <__fixunssfsi+0x30>
     c34:	b9 2f       	mov	r27, r25
     c36:	99 27       	eor	r25, r25
     c38:	b7 51       	subi	r27, 0x17	; 23
     c3a:	b0 f0       	brcs	.+44     	; 0xc68 <__fixunssfsi+0x3e>
     c3c:	e1 f0       	breq	.+56     	; 0xc76 <__fixunssfsi+0x4c>
     c3e:	66 0f       	add	r22, r22
     c40:	77 1f       	adc	r23, r23
     c42:	88 1f       	adc	r24, r24
     c44:	99 1f       	adc	r25, r25
     c46:	1a f0       	brmi	.+6      	; 0xc4e <__fixunssfsi+0x24>
     c48:	ba 95       	dec	r27
     c4a:	c9 f7       	brne	.-14     	; 0xc3e <__fixunssfsi+0x14>
     c4c:	14 c0       	rjmp	.+40     	; 0xc76 <__fixunssfsi+0x4c>
     c4e:	b1 30       	cpi	r27, 0x01	; 1
     c50:	91 f0       	breq	.+36     	; 0xc76 <__fixunssfsi+0x4c>
     c52:	0e 94 cb 06 	call	0xd96	; 0xd96 <__fp_zero>
     c56:	b1 e0       	ldi	r27, 0x01	; 1
     c58:	08 95       	ret
     c5a:	0c 94 cb 06 	jmp	0xd96	; 0xd96 <__fp_zero>
     c5e:	67 2f       	mov	r22, r23
     c60:	78 2f       	mov	r23, r24
     c62:	88 27       	eor	r24, r24
     c64:	b8 5f       	subi	r27, 0xF8	; 248
     c66:	39 f0       	breq	.+14     	; 0xc76 <__fixunssfsi+0x4c>
     c68:	b9 3f       	cpi	r27, 0xF9	; 249
     c6a:	cc f3       	brlt	.-14     	; 0xc5e <__fixunssfsi+0x34>
     c6c:	86 95       	lsr	r24
     c6e:	77 95       	ror	r23
     c70:	67 95       	ror	r22
     c72:	b3 95       	inc	r27
     c74:	d9 f7       	brne	.-10     	; 0xc6c <__fixunssfsi+0x42>
     c76:	3e f4       	brtc	.+14     	; 0xc86 <__fixunssfsi+0x5c>
     c78:	90 95       	com	r25
     c7a:	80 95       	com	r24
     c7c:	70 95       	com	r23
     c7e:	61 95       	neg	r22
     c80:	7f 4f       	sbci	r23, 0xFF	; 255
     c82:	8f 4f       	sbci	r24, 0xFF	; 255
     c84:	9f 4f       	sbci	r25, 0xFF	; 255
     c86:	08 95       	ret

00000c88 <__floatunsisf>:
     c88:	e8 94       	clt
     c8a:	09 c0       	rjmp	.+18     	; 0xc9e <__floatsisf+0x12>

00000c8c <__floatsisf>:
     c8c:	97 fb       	bst	r25, 7
     c8e:	3e f4       	brtc	.+14     	; 0xc9e <__floatsisf+0x12>
     c90:	90 95       	com	r25
     c92:	80 95       	com	r24
     c94:	70 95       	com	r23
     c96:	61 95       	neg	r22
     c98:	7f 4f       	sbci	r23, 0xFF	; 255
     c9a:	8f 4f       	sbci	r24, 0xFF	; 255
     c9c:	9f 4f       	sbci	r25, 0xFF	; 255
     c9e:	99 23       	and	r25, r25
     ca0:	a9 f0       	breq	.+42     	; 0xccc <__floatsisf+0x40>
     ca2:	f9 2f       	mov	r31, r25
     ca4:	96 e9       	ldi	r25, 0x96	; 150
     ca6:	bb 27       	eor	r27, r27
     ca8:	93 95       	inc	r25
     caa:	f6 95       	lsr	r31
     cac:	87 95       	ror	r24
     cae:	77 95       	ror	r23
     cb0:	67 95       	ror	r22
     cb2:	b7 95       	ror	r27
     cb4:	f1 11       	cpse	r31, r1
     cb6:	f8 cf       	rjmp	.-16     	; 0xca8 <__floatsisf+0x1c>
     cb8:	fa f4       	brpl	.+62     	; 0xcf8 <__floatsisf+0x6c>
     cba:	bb 0f       	add	r27, r27
     cbc:	11 f4       	brne	.+4      	; 0xcc2 <__floatsisf+0x36>
     cbe:	60 ff       	sbrs	r22, 0
     cc0:	1b c0       	rjmp	.+54     	; 0xcf8 <__floatsisf+0x6c>
     cc2:	6f 5f       	subi	r22, 0xFF	; 255
     cc4:	7f 4f       	sbci	r23, 0xFF	; 255
     cc6:	8f 4f       	sbci	r24, 0xFF	; 255
     cc8:	9f 4f       	sbci	r25, 0xFF	; 255
     cca:	16 c0       	rjmp	.+44     	; 0xcf8 <__floatsisf+0x6c>
     ccc:	88 23       	and	r24, r24
     cce:	11 f0       	breq	.+4      	; 0xcd4 <__floatsisf+0x48>
     cd0:	96 e9       	ldi	r25, 0x96	; 150
     cd2:	11 c0       	rjmp	.+34     	; 0xcf6 <__floatsisf+0x6a>
     cd4:	77 23       	and	r23, r23
     cd6:	21 f0       	breq	.+8      	; 0xce0 <__floatsisf+0x54>
     cd8:	9e e8       	ldi	r25, 0x8E	; 142
     cda:	87 2f       	mov	r24, r23
     cdc:	76 2f       	mov	r23, r22
     cde:	05 c0       	rjmp	.+10     	; 0xcea <__floatsisf+0x5e>
     ce0:	66 23       	and	r22, r22
     ce2:	71 f0       	breq	.+28     	; 0xd00 <__floatsisf+0x74>
     ce4:	96 e8       	ldi	r25, 0x86	; 134
     ce6:	86 2f       	mov	r24, r22
     ce8:	70 e0       	ldi	r23, 0x00	; 0
     cea:	60 e0       	ldi	r22, 0x00	; 0
     cec:	2a f0       	brmi	.+10     	; 0xcf8 <__floatsisf+0x6c>
     cee:	9a 95       	dec	r25
     cf0:	66 0f       	add	r22, r22
     cf2:	77 1f       	adc	r23, r23
     cf4:	88 1f       	adc	r24, r24
     cf6:	da f7       	brpl	.-10     	; 0xcee <__floatsisf+0x62>
     cf8:	88 0f       	add	r24, r24
     cfa:	96 95       	lsr	r25
     cfc:	87 95       	ror	r24
     cfe:	97 f9       	bld	r25, 7
     d00:	08 95       	ret

00000d02 <__fp_inf>:
     d02:	97 f9       	bld	r25, 7
     d04:	9f 67       	ori	r25, 0x7F	; 127
     d06:	80 e8       	ldi	r24, 0x80	; 128
     d08:	70 e0       	ldi	r23, 0x00	; 0
     d0a:	60 e0       	ldi	r22, 0x00	; 0
     d0c:	08 95       	ret

00000d0e <__fp_nan>:
     d0e:	9f ef       	ldi	r25, 0xFF	; 255
     d10:	80 ec       	ldi	r24, 0xC0	; 192
     d12:	08 95       	ret

00000d14 <__fp_pscA>:
     d14:	00 24       	eor	r0, r0
     d16:	0a 94       	dec	r0
     d18:	16 16       	cp	r1, r22
     d1a:	17 06       	cpc	r1, r23
     d1c:	18 06       	cpc	r1, r24
     d1e:	09 06       	cpc	r0, r25
     d20:	08 95       	ret

00000d22 <__fp_pscB>:
     d22:	00 24       	eor	r0, r0
     d24:	0a 94       	dec	r0
     d26:	12 16       	cp	r1, r18
     d28:	13 06       	cpc	r1, r19
     d2a:	14 06       	cpc	r1, r20
     d2c:	05 06       	cpc	r0, r21
     d2e:	08 95       	ret

00000d30 <__fp_round>:
     d30:	09 2e       	mov	r0, r25
     d32:	03 94       	inc	r0
     d34:	00 0c       	add	r0, r0
     d36:	11 f4       	brne	.+4      	; 0xd3c <__fp_round+0xc>
     d38:	88 23       	and	r24, r24
     d3a:	52 f0       	brmi	.+20     	; 0xd50 <__fp_round+0x20>
     d3c:	bb 0f       	add	r27, r27
     d3e:	40 f4       	brcc	.+16     	; 0xd50 <__fp_round+0x20>
     d40:	bf 2b       	or	r27, r31
     d42:	11 f4       	brne	.+4      	; 0xd48 <__fp_round+0x18>
     d44:	60 ff       	sbrs	r22, 0
     d46:	04 c0       	rjmp	.+8      	; 0xd50 <__fp_round+0x20>
     d48:	6f 5f       	subi	r22, 0xFF	; 255
     d4a:	7f 4f       	sbci	r23, 0xFF	; 255
     d4c:	8f 4f       	sbci	r24, 0xFF	; 255
     d4e:	9f 4f       	sbci	r25, 0xFF	; 255
     d50:	08 95       	ret

00000d52 <__fp_split3>:
     d52:	57 fd       	sbrc	r21, 7
     d54:	90 58       	subi	r25, 0x80	; 128
     d56:	44 0f       	add	r20, r20
     d58:	55 1f       	adc	r21, r21
     d5a:	59 f0       	breq	.+22     	; 0xd72 <__fp_splitA+0x10>
     d5c:	5f 3f       	cpi	r21, 0xFF	; 255
     d5e:	71 f0       	breq	.+28     	; 0xd7c <__fp_splitA+0x1a>
     d60:	47 95       	ror	r20

00000d62 <__fp_splitA>:
     d62:	88 0f       	add	r24, r24
     d64:	97 fb       	bst	r25, 7
     d66:	99 1f       	adc	r25, r25
     d68:	61 f0       	breq	.+24     	; 0xd82 <__fp_splitA+0x20>
     d6a:	9f 3f       	cpi	r25, 0xFF	; 255
     d6c:	79 f0       	breq	.+30     	; 0xd8c <__fp_splitA+0x2a>
     d6e:	87 95       	ror	r24
     d70:	08 95       	ret
     d72:	12 16       	cp	r1, r18
     d74:	13 06       	cpc	r1, r19
     d76:	14 06       	cpc	r1, r20
     d78:	55 1f       	adc	r21, r21
     d7a:	f2 cf       	rjmp	.-28     	; 0xd60 <__fp_split3+0xe>
     d7c:	46 95       	lsr	r20
     d7e:	f1 df       	rcall	.-30     	; 0xd62 <__fp_splitA>
     d80:	08 c0       	rjmp	.+16     	; 0xd92 <__fp_splitA+0x30>
     d82:	16 16       	cp	r1, r22
     d84:	17 06       	cpc	r1, r23
     d86:	18 06       	cpc	r1, r24
     d88:	99 1f       	adc	r25, r25
     d8a:	f1 cf       	rjmp	.-30     	; 0xd6e <__fp_splitA+0xc>
     d8c:	86 95       	lsr	r24
     d8e:	71 05       	cpc	r23, r1
     d90:	61 05       	cpc	r22, r1
     d92:	08 94       	sec
     d94:	08 95       	ret

00000d96 <__fp_zero>:
     d96:	e8 94       	clt

00000d98 <__fp_szero>:
     d98:	bb 27       	eor	r27, r27
     d9a:	66 27       	eor	r22, r22
     d9c:	77 27       	eor	r23, r23
     d9e:	cb 01       	movw	r24, r22
     da0:	97 f9       	bld	r25, 7
     da2:	08 95       	ret

00000da4 <sprintf>:
     da4:	ae e0       	ldi	r26, 0x0E	; 14
     da6:	b0 e0       	ldi	r27, 0x00	; 0
     da8:	e8 ed       	ldi	r30, 0xD8	; 216
     daa:	f6 e0       	ldi	r31, 0x06	; 6
     dac:	0c 94 93 09 	jmp	0x1326	; 0x1326 <__prologue_saves__+0x1c>
     db0:	0d 89       	ldd	r16, Y+21	; 0x15
     db2:	1e 89       	ldd	r17, Y+22	; 0x16
     db4:	86 e0       	ldi	r24, 0x06	; 6
     db6:	8c 83       	std	Y+4, r24	; 0x04
     db8:	1a 83       	std	Y+2, r17	; 0x02
     dba:	09 83       	std	Y+1, r16	; 0x01
     dbc:	8f ef       	ldi	r24, 0xFF	; 255
     dbe:	9f e7       	ldi	r25, 0x7F	; 127
     dc0:	9e 83       	std	Y+6, r25	; 0x06
     dc2:	8d 83       	std	Y+5, r24	; 0x05
     dc4:	ae 01       	movw	r20, r28
     dc6:	47 5e       	subi	r20, 0xE7	; 231
     dc8:	5f 4f       	sbci	r21, 0xFF	; 255
     dca:	6f 89       	ldd	r22, Y+23	; 0x17
     dcc:	78 8d       	ldd	r23, Y+24	; 0x18
     dce:	ce 01       	movw	r24, r28
     dd0:	01 96       	adiw	r24, 0x01	; 1
     dd2:	0e 94 f4 06 	call	0xde8	; 0xde8 <vfprintf>
     dd6:	ef 81       	ldd	r30, Y+7	; 0x07
     dd8:	f8 85       	ldd	r31, Y+8	; 0x08
     dda:	e0 0f       	add	r30, r16
     ddc:	f1 1f       	adc	r31, r17
     dde:	10 82       	st	Z, r1
     de0:	2e 96       	adiw	r28, 0x0e	; 14
     de2:	e4 e0       	ldi	r30, 0x04	; 4
     de4:	0c 94 af 09 	jmp	0x135e	; 0x135e <__epilogue_restores__+0x1c>

00000de8 <vfprintf>:
     de8:	ab e0       	ldi	r26, 0x0B	; 11
     dea:	b0 e0       	ldi	r27, 0x00	; 0
     dec:	ea ef       	ldi	r30, 0xFA	; 250
     dee:	f6 e0       	ldi	r31, 0x06	; 6
     df0:	0c 94 85 09 	jmp	0x130a	; 0x130a <__prologue_saves__>
     df4:	6c 01       	movw	r12, r24
     df6:	7b 01       	movw	r14, r22
     df8:	8a 01       	movw	r16, r20
     dfa:	fc 01       	movw	r30, r24
     dfc:	17 82       	std	Z+7, r1	; 0x07
     dfe:	16 82       	std	Z+6, r1	; 0x06
     e00:	83 81       	ldd	r24, Z+3	; 0x03
     e02:	81 ff       	sbrs	r24, 1
     e04:	cc c1       	rjmp	.+920    	; 0x119e <vfprintf+0x3b6>
     e06:	ce 01       	movw	r24, r28
     e08:	01 96       	adiw	r24, 0x01	; 1
     e0a:	3c 01       	movw	r6, r24
     e0c:	f6 01       	movw	r30, r12
     e0e:	93 81       	ldd	r25, Z+3	; 0x03
     e10:	f7 01       	movw	r30, r14
     e12:	93 fd       	sbrc	r25, 3
     e14:	85 91       	lpm	r24, Z+
     e16:	93 ff       	sbrs	r25, 3
     e18:	81 91       	ld	r24, Z+
     e1a:	7f 01       	movw	r14, r30
     e1c:	88 23       	and	r24, r24
     e1e:	09 f4       	brne	.+2      	; 0xe22 <vfprintf+0x3a>
     e20:	ba c1       	rjmp	.+884    	; 0x1196 <vfprintf+0x3ae>
     e22:	85 32       	cpi	r24, 0x25	; 37
     e24:	39 f4       	brne	.+14     	; 0xe34 <vfprintf+0x4c>
     e26:	93 fd       	sbrc	r25, 3
     e28:	85 91       	lpm	r24, Z+
     e2a:	93 ff       	sbrs	r25, 3
     e2c:	81 91       	ld	r24, Z+
     e2e:	7f 01       	movw	r14, r30
     e30:	85 32       	cpi	r24, 0x25	; 37
     e32:	29 f4       	brne	.+10     	; 0xe3e <vfprintf+0x56>
     e34:	b6 01       	movw	r22, r12
     e36:	90 e0       	ldi	r25, 0x00	; 0
     e38:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <fputc>
     e3c:	e7 cf       	rjmp	.-50     	; 0xe0c <vfprintf+0x24>
     e3e:	91 2c       	mov	r9, r1
     e40:	21 2c       	mov	r2, r1
     e42:	31 2c       	mov	r3, r1
     e44:	ff e1       	ldi	r31, 0x1F	; 31
     e46:	f3 15       	cp	r31, r3
     e48:	d8 f0       	brcs	.+54     	; 0xe80 <vfprintf+0x98>
     e4a:	8b 32       	cpi	r24, 0x2B	; 43
     e4c:	79 f0       	breq	.+30     	; 0xe6c <vfprintf+0x84>
     e4e:	38 f4       	brcc	.+14     	; 0xe5e <vfprintf+0x76>
     e50:	80 32       	cpi	r24, 0x20	; 32
     e52:	79 f0       	breq	.+30     	; 0xe72 <vfprintf+0x8a>
     e54:	83 32       	cpi	r24, 0x23	; 35
     e56:	a1 f4       	brne	.+40     	; 0xe80 <vfprintf+0x98>
     e58:	23 2d       	mov	r18, r3
     e5a:	20 61       	ori	r18, 0x10	; 16
     e5c:	1d c0       	rjmp	.+58     	; 0xe98 <vfprintf+0xb0>
     e5e:	8d 32       	cpi	r24, 0x2D	; 45
     e60:	61 f0       	breq	.+24     	; 0xe7a <vfprintf+0x92>
     e62:	80 33       	cpi	r24, 0x30	; 48
     e64:	69 f4       	brne	.+26     	; 0xe80 <vfprintf+0x98>
     e66:	23 2d       	mov	r18, r3
     e68:	21 60       	ori	r18, 0x01	; 1
     e6a:	16 c0       	rjmp	.+44     	; 0xe98 <vfprintf+0xb0>
     e6c:	83 2d       	mov	r24, r3
     e6e:	82 60       	ori	r24, 0x02	; 2
     e70:	38 2e       	mov	r3, r24
     e72:	e3 2d       	mov	r30, r3
     e74:	e4 60       	ori	r30, 0x04	; 4
     e76:	3e 2e       	mov	r3, r30
     e78:	2a c0       	rjmp	.+84     	; 0xece <vfprintf+0xe6>
     e7a:	f3 2d       	mov	r31, r3
     e7c:	f8 60       	ori	r31, 0x08	; 8
     e7e:	1d c0       	rjmp	.+58     	; 0xeba <vfprintf+0xd2>
     e80:	37 fc       	sbrc	r3, 7
     e82:	2d c0       	rjmp	.+90     	; 0xede <vfprintf+0xf6>
     e84:	20 ed       	ldi	r18, 0xD0	; 208
     e86:	28 0f       	add	r18, r24
     e88:	2a 30       	cpi	r18, 0x0A	; 10
     e8a:	40 f0       	brcs	.+16     	; 0xe9c <vfprintf+0xb4>
     e8c:	8e 32       	cpi	r24, 0x2E	; 46
     e8e:	b9 f4       	brne	.+46     	; 0xebe <vfprintf+0xd6>
     e90:	36 fc       	sbrc	r3, 6
     e92:	81 c1       	rjmp	.+770    	; 0x1196 <vfprintf+0x3ae>
     e94:	23 2d       	mov	r18, r3
     e96:	20 64       	ori	r18, 0x40	; 64
     e98:	32 2e       	mov	r3, r18
     e9a:	19 c0       	rjmp	.+50     	; 0xece <vfprintf+0xe6>
     e9c:	36 fe       	sbrs	r3, 6
     e9e:	06 c0       	rjmp	.+12     	; 0xeac <vfprintf+0xc4>
     ea0:	8a e0       	ldi	r24, 0x0A	; 10
     ea2:	98 9e       	mul	r9, r24
     ea4:	20 0d       	add	r18, r0
     ea6:	11 24       	eor	r1, r1
     ea8:	92 2e       	mov	r9, r18
     eaa:	11 c0       	rjmp	.+34     	; 0xece <vfprintf+0xe6>
     eac:	ea e0       	ldi	r30, 0x0A	; 10
     eae:	2e 9e       	mul	r2, r30
     eb0:	20 0d       	add	r18, r0
     eb2:	11 24       	eor	r1, r1
     eb4:	22 2e       	mov	r2, r18
     eb6:	f3 2d       	mov	r31, r3
     eb8:	f0 62       	ori	r31, 0x20	; 32
     eba:	3f 2e       	mov	r3, r31
     ebc:	08 c0       	rjmp	.+16     	; 0xece <vfprintf+0xe6>
     ebe:	8c 36       	cpi	r24, 0x6C	; 108
     ec0:	21 f4       	brne	.+8      	; 0xeca <vfprintf+0xe2>
     ec2:	83 2d       	mov	r24, r3
     ec4:	80 68       	ori	r24, 0x80	; 128
     ec6:	38 2e       	mov	r3, r24
     ec8:	02 c0       	rjmp	.+4      	; 0xece <vfprintf+0xe6>
     eca:	88 36       	cpi	r24, 0x68	; 104
     ecc:	41 f4       	brne	.+16     	; 0xede <vfprintf+0xf6>
     ece:	f7 01       	movw	r30, r14
     ed0:	93 fd       	sbrc	r25, 3
     ed2:	85 91       	lpm	r24, Z+
     ed4:	93 ff       	sbrs	r25, 3
     ed6:	81 91       	ld	r24, Z+
     ed8:	7f 01       	movw	r14, r30
     eda:	81 11       	cpse	r24, r1
     edc:	b3 cf       	rjmp	.-154    	; 0xe44 <vfprintf+0x5c>
     ede:	98 2f       	mov	r25, r24
     ee0:	9f 7d       	andi	r25, 0xDF	; 223
     ee2:	95 54       	subi	r25, 0x45	; 69
     ee4:	93 30       	cpi	r25, 0x03	; 3
     ee6:	28 f4       	brcc	.+10     	; 0xef2 <vfprintf+0x10a>
     ee8:	0c 5f       	subi	r16, 0xFC	; 252
     eea:	1f 4f       	sbci	r17, 0xFF	; 255
     eec:	9f e3       	ldi	r25, 0x3F	; 63
     eee:	99 83       	std	Y+1, r25	; 0x01
     ef0:	0d c0       	rjmp	.+26     	; 0xf0c <vfprintf+0x124>
     ef2:	83 36       	cpi	r24, 0x63	; 99
     ef4:	31 f0       	breq	.+12     	; 0xf02 <vfprintf+0x11a>
     ef6:	83 37       	cpi	r24, 0x73	; 115
     ef8:	71 f0       	breq	.+28     	; 0xf16 <vfprintf+0x12e>
     efa:	83 35       	cpi	r24, 0x53	; 83
     efc:	09 f0       	breq	.+2      	; 0xf00 <vfprintf+0x118>
     efe:	59 c0       	rjmp	.+178    	; 0xfb2 <vfprintf+0x1ca>
     f00:	21 c0       	rjmp	.+66     	; 0xf44 <vfprintf+0x15c>
     f02:	f8 01       	movw	r30, r16
     f04:	80 81       	ld	r24, Z
     f06:	89 83       	std	Y+1, r24	; 0x01
     f08:	0e 5f       	subi	r16, 0xFE	; 254
     f0a:	1f 4f       	sbci	r17, 0xFF	; 255
     f0c:	88 24       	eor	r8, r8
     f0e:	83 94       	inc	r8
     f10:	91 2c       	mov	r9, r1
     f12:	53 01       	movw	r10, r6
     f14:	13 c0       	rjmp	.+38     	; 0xf3c <vfprintf+0x154>
     f16:	28 01       	movw	r4, r16
     f18:	f2 e0       	ldi	r31, 0x02	; 2
     f1a:	4f 0e       	add	r4, r31
     f1c:	51 1c       	adc	r5, r1
     f1e:	f8 01       	movw	r30, r16
     f20:	a0 80       	ld	r10, Z
     f22:	b1 80       	ldd	r11, Z+1	; 0x01
     f24:	36 fe       	sbrs	r3, 6
     f26:	03 c0       	rjmp	.+6      	; 0xf2e <vfprintf+0x146>
     f28:	69 2d       	mov	r22, r9
     f2a:	70 e0       	ldi	r23, 0x00	; 0
     f2c:	02 c0       	rjmp	.+4      	; 0xf32 <vfprintf+0x14a>
     f2e:	6f ef       	ldi	r22, 0xFF	; 255
     f30:	7f ef       	ldi	r23, 0xFF	; 255
     f32:	c5 01       	movw	r24, r10
     f34:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <strnlen>
     f38:	4c 01       	movw	r8, r24
     f3a:	82 01       	movw	r16, r4
     f3c:	f3 2d       	mov	r31, r3
     f3e:	ff 77       	andi	r31, 0x7F	; 127
     f40:	3f 2e       	mov	r3, r31
     f42:	16 c0       	rjmp	.+44     	; 0xf70 <vfprintf+0x188>
     f44:	28 01       	movw	r4, r16
     f46:	22 e0       	ldi	r18, 0x02	; 2
     f48:	42 0e       	add	r4, r18
     f4a:	51 1c       	adc	r5, r1
     f4c:	f8 01       	movw	r30, r16
     f4e:	a0 80       	ld	r10, Z
     f50:	b1 80       	ldd	r11, Z+1	; 0x01
     f52:	36 fe       	sbrs	r3, 6
     f54:	03 c0       	rjmp	.+6      	; 0xf5c <vfprintf+0x174>
     f56:	69 2d       	mov	r22, r9
     f58:	70 e0       	ldi	r23, 0x00	; 0
     f5a:	02 c0       	rjmp	.+4      	; 0xf60 <vfprintf+0x178>
     f5c:	6f ef       	ldi	r22, 0xFF	; 255
     f5e:	7f ef       	ldi	r23, 0xFF	; 255
     f60:	c5 01       	movw	r24, r10
     f62:	0e 94 d5 08 	call	0x11aa	; 0x11aa <strnlen_P>
     f66:	4c 01       	movw	r8, r24
     f68:	f3 2d       	mov	r31, r3
     f6a:	f0 68       	ori	r31, 0x80	; 128
     f6c:	3f 2e       	mov	r3, r31
     f6e:	82 01       	movw	r16, r4
     f70:	33 fc       	sbrc	r3, 3
     f72:	1b c0       	rjmp	.+54     	; 0xfaa <vfprintf+0x1c2>
     f74:	82 2d       	mov	r24, r2
     f76:	90 e0       	ldi	r25, 0x00	; 0
     f78:	88 16       	cp	r8, r24
     f7a:	99 06       	cpc	r9, r25
     f7c:	b0 f4       	brcc	.+44     	; 0xfaa <vfprintf+0x1c2>
     f7e:	b6 01       	movw	r22, r12
     f80:	80 e2       	ldi	r24, 0x20	; 32
     f82:	90 e0       	ldi	r25, 0x00	; 0
     f84:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <fputc>
     f88:	2a 94       	dec	r2
     f8a:	f4 cf       	rjmp	.-24     	; 0xf74 <vfprintf+0x18c>
     f8c:	f5 01       	movw	r30, r10
     f8e:	37 fc       	sbrc	r3, 7
     f90:	85 91       	lpm	r24, Z+
     f92:	37 fe       	sbrs	r3, 7
     f94:	81 91       	ld	r24, Z+
     f96:	5f 01       	movw	r10, r30
     f98:	b6 01       	movw	r22, r12
     f9a:	90 e0       	ldi	r25, 0x00	; 0
     f9c:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <fputc>
     fa0:	21 10       	cpse	r2, r1
     fa2:	2a 94       	dec	r2
     fa4:	21 e0       	ldi	r18, 0x01	; 1
     fa6:	82 1a       	sub	r8, r18
     fa8:	91 08       	sbc	r9, r1
     faa:	81 14       	cp	r8, r1
     fac:	91 04       	cpc	r9, r1
     fae:	71 f7       	brne	.-36     	; 0xf8c <vfprintf+0x1a4>
     fb0:	e8 c0       	rjmp	.+464    	; 0x1182 <vfprintf+0x39a>
     fb2:	84 36       	cpi	r24, 0x64	; 100
     fb4:	11 f0       	breq	.+4      	; 0xfba <vfprintf+0x1d2>
     fb6:	89 36       	cpi	r24, 0x69	; 105
     fb8:	41 f5       	brne	.+80     	; 0x100a <vfprintf+0x222>
     fba:	f8 01       	movw	r30, r16
     fbc:	37 fe       	sbrs	r3, 7
     fbe:	07 c0       	rjmp	.+14     	; 0xfce <vfprintf+0x1e6>
     fc0:	60 81       	ld	r22, Z
     fc2:	71 81       	ldd	r23, Z+1	; 0x01
     fc4:	82 81       	ldd	r24, Z+2	; 0x02
     fc6:	93 81       	ldd	r25, Z+3	; 0x03
     fc8:	0c 5f       	subi	r16, 0xFC	; 252
     fca:	1f 4f       	sbci	r17, 0xFF	; 255
     fcc:	08 c0       	rjmp	.+16     	; 0xfde <vfprintf+0x1f6>
     fce:	60 81       	ld	r22, Z
     fd0:	71 81       	ldd	r23, Z+1	; 0x01
     fd2:	07 2e       	mov	r0, r23
     fd4:	00 0c       	add	r0, r0
     fd6:	88 0b       	sbc	r24, r24
     fd8:	99 0b       	sbc	r25, r25
     fda:	0e 5f       	subi	r16, 0xFE	; 254
     fdc:	1f 4f       	sbci	r17, 0xFF	; 255
     fde:	f3 2d       	mov	r31, r3
     fe0:	ff 76       	andi	r31, 0x6F	; 111
     fe2:	3f 2e       	mov	r3, r31
     fe4:	97 ff       	sbrs	r25, 7
     fe6:	09 c0       	rjmp	.+18     	; 0xffa <vfprintf+0x212>
     fe8:	90 95       	com	r25
     fea:	80 95       	com	r24
     fec:	70 95       	com	r23
     fee:	61 95       	neg	r22
     ff0:	7f 4f       	sbci	r23, 0xFF	; 255
     ff2:	8f 4f       	sbci	r24, 0xFF	; 255
     ff4:	9f 4f       	sbci	r25, 0xFF	; 255
     ff6:	f0 68       	ori	r31, 0x80	; 128
     ff8:	3f 2e       	mov	r3, r31
     ffa:	2a e0       	ldi	r18, 0x0A	; 10
     ffc:	30 e0       	ldi	r19, 0x00	; 0
     ffe:	a3 01       	movw	r20, r6
    1000:	0e 94 27 09 	call	0x124e	; 0x124e <__ultoa_invert>
    1004:	88 2e       	mov	r8, r24
    1006:	86 18       	sub	r8, r6
    1008:	45 c0       	rjmp	.+138    	; 0x1094 <vfprintf+0x2ac>
    100a:	85 37       	cpi	r24, 0x75	; 117
    100c:	31 f4       	brne	.+12     	; 0x101a <vfprintf+0x232>
    100e:	23 2d       	mov	r18, r3
    1010:	2f 7e       	andi	r18, 0xEF	; 239
    1012:	b2 2e       	mov	r11, r18
    1014:	2a e0       	ldi	r18, 0x0A	; 10
    1016:	30 e0       	ldi	r19, 0x00	; 0
    1018:	25 c0       	rjmp	.+74     	; 0x1064 <vfprintf+0x27c>
    101a:	93 2d       	mov	r25, r3
    101c:	99 7f       	andi	r25, 0xF9	; 249
    101e:	b9 2e       	mov	r11, r25
    1020:	8f 36       	cpi	r24, 0x6F	; 111
    1022:	c1 f0       	breq	.+48     	; 0x1054 <vfprintf+0x26c>
    1024:	18 f4       	brcc	.+6      	; 0x102c <vfprintf+0x244>
    1026:	88 35       	cpi	r24, 0x58	; 88
    1028:	79 f0       	breq	.+30     	; 0x1048 <vfprintf+0x260>
    102a:	b5 c0       	rjmp	.+362    	; 0x1196 <vfprintf+0x3ae>
    102c:	80 37       	cpi	r24, 0x70	; 112
    102e:	19 f0       	breq	.+6      	; 0x1036 <vfprintf+0x24e>
    1030:	88 37       	cpi	r24, 0x78	; 120
    1032:	21 f0       	breq	.+8      	; 0x103c <vfprintf+0x254>
    1034:	b0 c0       	rjmp	.+352    	; 0x1196 <vfprintf+0x3ae>
    1036:	e9 2f       	mov	r30, r25
    1038:	e0 61       	ori	r30, 0x10	; 16
    103a:	be 2e       	mov	r11, r30
    103c:	b4 fe       	sbrs	r11, 4
    103e:	0d c0       	rjmp	.+26     	; 0x105a <vfprintf+0x272>
    1040:	fb 2d       	mov	r31, r11
    1042:	f4 60       	ori	r31, 0x04	; 4
    1044:	bf 2e       	mov	r11, r31
    1046:	09 c0       	rjmp	.+18     	; 0x105a <vfprintf+0x272>
    1048:	34 fe       	sbrs	r3, 4
    104a:	0a c0       	rjmp	.+20     	; 0x1060 <vfprintf+0x278>
    104c:	29 2f       	mov	r18, r25
    104e:	26 60       	ori	r18, 0x06	; 6
    1050:	b2 2e       	mov	r11, r18
    1052:	06 c0       	rjmp	.+12     	; 0x1060 <vfprintf+0x278>
    1054:	28 e0       	ldi	r18, 0x08	; 8
    1056:	30 e0       	ldi	r19, 0x00	; 0
    1058:	05 c0       	rjmp	.+10     	; 0x1064 <vfprintf+0x27c>
    105a:	20 e1       	ldi	r18, 0x10	; 16
    105c:	30 e0       	ldi	r19, 0x00	; 0
    105e:	02 c0       	rjmp	.+4      	; 0x1064 <vfprintf+0x27c>
    1060:	20 e1       	ldi	r18, 0x10	; 16
    1062:	32 e0       	ldi	r19, 0x02	; 2
    1064:	f8 01       	movw	r30, r16
    1066:	b7 fe       	sbrs	r11, 7
    1068:	07 c0       	rjmp	.+14     	; 0x1078 <vfprintf+0x290>
    106a:	60 81       	ld	r22, Z
    106c:	71 81       	ldd	r23, Z+1	; 0x01
    106e:	82 81       	ldd	r24, Z+2	; 0x02
    1070:	93 81       	ldd	r25, Z+3	; 0x03
    1072:	0c 5f       	subi	r16, 0xFC	; 252
    1074:	1f 4f       	sbci	r17, 0xFF	; 255
    1076:	06 c0       	rjmp	.+12     	; 0x1084 <vfprintf+0x29c>
    1078:	60 81       	ld	r22, Z
    107a:	71 81       	ldd	r23, Z+1	; 0x01
    107c:	80 e0       	ldi	r24, 0x00	; 0
    107e:	90 e0       	ldi	r25, 0x00	; 0
    1080:	0e 5f       	subi	r16, 0xFE	; 254
    1082:	1f 4f       	sbci	r17, 0xFF	; 255
    1084:	a3 01       	movw	r20, r6
    1086:	0e 94 27 09 	call	0x124e	; 0x124e <__ultoa_invert>
    108a:	88 2e       	mov	r8, r24
    108c:	86 18       	sub	r8, r6
    108e:	fb 2d       	mov	r31, r11
    1090:	ff 77       	andi	r31, 0x7F	; 127
    1092:	3f 2e       	mov	r3, r31
    1094:	36 fe       	sbrs	r3, 6
    1096:	0d c0       	rjmp	.+26     	; 0x10b2 <vfprintf+0x2ca>
    1098:	23 2d       	mov	r18, r3
    109a:	2e 7f       	andi	r18, 0xFE	; 254
    109c:	a2 2e       	mov	r10, r18
    109e:	89 14       	cp	r8, r9
    10a0:	58 f4       	brcc	.+22     	; 0x10b8 <vfprintf+0x2d0>
    10a2:	34 fe       	sbrs	r3, 4
    10a4:	0b c0       	rjmp	.+22     	; 0x10bc <vfprintf+0x2d4>
    10a6:	32 fc       	sbrc	r3, 2
    10a8:	09 c0       	rjmp	.+18     	; 0x10bc <vfprintf+0x2d4>
    10aa:	83 2d       	mov	r24, r3
    10ac:	8e 7e       	andi	r24, 0xEE	; 238
    10ae:	a8 2e       	mov	r10, r24
    10b0:	05 c0       	rjmp	.+10     	; 0x10bc <vfprintf+0x2d4>
    10b2:	b8 2c       	mov	r11, r8
    10b4:	a3 2c       	mov	r10, r3
    10b6:	03 c0       	rjmp	.+6      	; 0x10be <vfprintf+0x2d6>
    10b8:	b8 2c       	mov	r11, r8
    10ba:	01 c0       	rjmp	.+2      	; 0x10be <vfprintf+0x2d6>
    10bc:	b9 2c       	mov	r11, r9
    10be:	a4 fe       	sbrs	r10, 4
    10c0:	0f c0       	rjmp	.+30     	; 0x10e0 <vfprintf+0x2f8>
    10c2:	fe 01       	movw	r30, r28
    10c4:	e8 0d       	add	r30, r8
    10c6:	f1 1d       	adc	r31, r1
    10c8:	80 81       	ld	r24, Z
    10ca:	80 33       	cpi	r24, 0x30	; 48
    10cc:	21 f4       	brne	.+8      	; 0x10d6 <vfprintf+0x2ee>
    10ce:	9a 2d       	mov	r25, r10
    10d0:	99 7e       	andi	r25, 0xE9	; 233
    10d2:	a9 2e       	mov	r10, r25
    10d4:	09 c0       	rjmp	.+18     	; 0x10e8 <vfprintf+0x300>
    10d6:	a2 fe       	sbrs	r10, 2
    10d8:	06 c0       	rjmp	.+12     	; 0x10e6 <vfprintf+0x2fe>
    10da:	b3 94       	inc	r11
    10dc:	b3 94       	inc	r11
    10de:	04 c0       	rjmp	.+8      	; 0x10e8 <vfprintf+0x300>
    10e0:	8a 2d       	mov	r24, r10
    10e2:	86 78       	andi	r24, 0x86	; 134
    10e4:	09 f0       	breq	.+2      	; 0x10e8 <vfprintf+0x300>
    10e6:	b3 94       	inc	r11
    10e8:	a3 fc       	sbrc	r10, 3
    10ea:	11 c0       	rjmp	.+34     	; 0x110e <vfprintf+0x326>
    10ec:	a0 fe       	sbrs	r10, 0
    10ee:	06 c0       	rjmp	.+12     	; 0x10fc <vfprintf+0x314>
    10f0:	b2 14       	cp	r11, r2
    10f2:	88 f4       	brcc	.+34     	; 0x1116 <vfprintf+0x32e>
    10f4:	28 0c       	add	r2, r8
    10f6:	92 2c       	mov	r9, r2
    10f8:	9b 18       	sub	r9, r11
    10fa:	0e c0       	rjmp	.+28     	; 0x1118 <vfprintf+0x330>
    10fc:	b2 14       	cp	r11, r2
    10fe:	60 f4       	brcc	.+24     	; 0x1118 <vfprintf+0x330>
    1100:	b6 01       	movw	r22, r12
    1102:	80 e2       	ldi	r24, 0x20	; 32
    1104:	90 e0       	ldi	r25, 0x00	; 0
    1106:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <fputc>
    110a:	b3 94       	inc	r11
    110c:	f7 cf       	rjmp	.-18     	; 0x10fc <vfprintf+0x314>
    110e:	b2 14       	cp	r11, r2
    1110:	18 f4       	brcc	.+6      	; 0x1118 <vfprintf+0x330>
    1112:	2b 18       	sub	r2, r11
    1114:	02 c0       	rjmp	.+4      	; 0x111a <vfprintf+0x332>
    1116:	98 2c       	mov	r9, r8
    1118:	21 2c       	mov	r2, r1
    111a:	a4 fe       	sbrs	r10, 4
    111c:	10 c0       	rjmp	.+32     	; 0x113e <vfprintf+0x356>
    111e:	b6 01       	movw	r22, r12
    1120:	80 e3       	ldi	r24, 0x30	; 48
    1122:	90 e0       	ldi	r25, 0x00	; 0
    1124:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <fputc>
    1128:	a2 fe       	sbrs	r10, 2
    112a:	17 c0       	rjmp	.+46     	; 0x115a <vfprintf+0x372>
    112c:	a1 fc       	sbrc	r10, 1
    112e:	03 c0       	rjmp	.+6      	; 0x1136 <vfprintf+0x34e>
    1130:	88 e7       	ldi	r24, 0x78	; 120
    1132:	90 e0       	ldi	r25, 0x00	; 0
    1134:	02 c0       	rjmp	.+4      	; 0x113a <vfprintf+0x352>
    1136:	88 e5       	ldi	r24, 0x58	; 88
    1138:	90 e0       	ldi	r25, 0x00	; 0
    113a:	b6 01       	movw	r22, r12
    113c:	0c c0       	rjmp	.+24     	; 0x1156 <vfprintf+0x36e>
    113e:	8a 2d       	mov	r24, r10
    1140:	86 78       	andi	r24, 0x86	; 134
    1142:	59 f0       	breq	.+22     	; 0x115a <vfprintf+0x372>
    1144:	a1 fe       	sbrs	r10, 1
    1146:	02 c0       	rjmp	.+4      	; 0x114c <vfprintf+0x364>
    1148:	8b e2       	ldi	r24, 0x2B	; 43
    114a:	01 c0       	rjmp	.+2      	; 0x114e <vfprintf+0x366>
    114c:	80 e2       	ldi	r24, 0x20	; 32
    114e:	a7 fc       	sbrc	r10, 7
    1150:	8d e2       	ldi	r24, 0x2D	; 45
    1152:	b6 01       	movw	r22, r12
    1154:	90 e0       	ldi	r25, 0x00	; 0
    1156:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <fputc>
    115a:	89 14       	cp	r8, r9
    115c:	38 f4       	brcc	.+14     	; 0x116c <vfprintf+0x384>
    115e:	b6 01       	movw	r22, r12
    1160:	80 e3       	ldi	r24, 0x30	; 48
    1162:	90 e0       	ldi	r25, 0x00	; 0
    1164:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <fputc>
    1168:	9a 94       	dec	r9
    116a:	f7 cf       	rjmp	.-18     	; 0x115a <vfprintf+0x372>
    116c:	8a 94       	dec	r8
    116e:	f3 01       	movw	r30, r6
    1170:	e8 0d       	add	r30, r8
    1172:	f1 1d       	adc	r31, r1
    1174:	80 81       	ld	r24, Z
    1176:	b6 01       	movw	r22, r12
    1178:	90 e0       	ldi	r25, 0x00	; 0
    117a:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <fputc>
    117e:	81 10       	cpse	r8, r1
    1180:	f5 cf       	rjmp	.-22     	; 0x116c <vfprintf+0x384>
    1182:	22 20       	and	r2, r2
    1184:	09 f4       	brne	.+2      	; 0x1188 <vfprintf+0x3a0>
    1186:	42 ce       	rjmp	.-892    	; 0xe0c <vfprintf+0x24>
    1188:	b6 01       	movw	r22, r12
    118a:	80 e2       	ldi	r24, 0x20	; 32
    118c:	90 e0       	ldi	r25, 0x00	; 0
    118e:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <fputc>
    1192:	2a 94       	dec	r2
    1194:	f6 cf       	rjmp	.-20     	; 0x1182 <vfprintf+0x39a>
    1196:	f6 01       	movw	r30, r12
    1198:	86 81       	ldd	r24, Z+6	; 0x06
    119a:	97 81       	ldd	r25, Z+7	; 0x07
    119c:	02 c0       	rjmp	.+4      	; 0x11a2 <vfprintf+0x3ba>
    119e:	8f ef       	ldi	r24, 0xFF	; 255
    11a0:	9f ef       	ldi	r25, 0xFF	; 255
    11a2:	2b 96       	adiw	r28, 0x0b	; 11
    11a4:	e2 e1       	ldi	r30, 0x12	; 18
    11a6:	0c 94 a1 09 	jmp	0x1342	; 0x1342 <__epilogue_restores__>

000011aa <strnlen_P>:
    11aa:	fc 01       	movw	r30, r24
    11ac:	05 90       	lpm	r0, Z+
    11ae:	61 50       	subi	r22, 0x01	; 1
    11b0:	70 40       	sbci	r23, 0x00	; 0
    11b2:	01 10       	cpse	r0, r1
    11b4:	d8 f7       	brcc	.-10     	; 0x11ac <strnlen_P+0x2>
    11b6:	80 95       	com	r24
    11b8:	90 95       	com	r25
    11ba:	8e 0f       	add	r24, r30
    11bc:	9f 1f       	adc	r25, r31
    11be:	08 95       	ret

000011c0 <strnlen>:
    11c0:	fc 01       	movw	r30, r24
    11c2:	61 50       	subi	r22, 0x01	; 1
    11c4:	70 40       	sbci	r23, 0x00	; 0
    11c6:	01 90       	ld	r0, Z+
    11c8:	01 10       	cpse	r0, r1
    11ca:	d8 f7       	brcc	.-10     	; 0x11c2 <strnlen+0x2>
    11cc:	80 95       	com	r24
    11ce:	90 95       	com	r25
    11d0:	8e 0f       	add	r24, r30
    11d2:	9f 1f       	adc	r25, r31
    11d4:	08 95       	ret

000011d6 <fputc>:
    11d6:	0f 93       	push	r16
    11d8:	1f 93       	push	r17
    11da:	cf 93       	push	r28
    11dc:	df 93       	push	r29
    11de:	fb 01       	movw	r30, r22
    11e0:	23 81       	ldd	r18, Z+3	; 0x03
    11e2:	21 fd       	sbrc	r18, 1
    11e4:	03 c0       	rjmp	.+6      	; 0x11ec <fputc+0x16>
    11e6:	8f ef       	ldi	r24, 0xFF	; 255
    11e8:	9f ef       	ldi	r25, 0xFF	; 255
    11ea:	2c c0       	rjmp	.+88     	; 0x1244 <fputc+0x6e>
    11ec:	22 ff       	sbrs	r18, 2
    11ee:	16 c0       	rjmp	.+44     	; 0x121c <fputc+0x46>
    11f0:	46 81       	ldd	r20, Z+6	; 0x06
    11f2:	57 81       	ldd	r21, Z+7	; 0x07
    11f4:	24 81       	ldd	r18, Z+4	; 0x04
    11f6:	35 81       	ldd	r19, Z+5	; 0x05
    11f8:	42 17       	cp	r20, r18
    11fa:	53 07       	cpc	r21, r19
    11fc:	44 f4       	brge	.+16     	; 0x120e <fputc+0x38>
    11fe:	a0 81       	ld	r26, Z
    1200:	b1 81       	ldd	r27, Z+1	; 0x01
    1202:	9d 01       	movw	r18, r26
    1204:	2f 5f       	subi	r18, 0xFF	; 255
    1206:	3f 4f       	sbci	r19, 0xFF	; 255
    1208:	31 83       	std	Z+1, r19	; 0x01
    120a:	20 83       	st	Z, r18
    120c:	8c 93       	st	X, r24
    120e:	26 81       	ldd	r18, Z+6	; 0x06
    1210:	37 81       	ldd	r19, Z+7	; 0x07
    1212:	2f 5f       	subi	r18, 0xFF	; 255
    1214:	3f 4f       	sbci	r19, 0xFF	; 255
    1216:	37 83       	std	Z+7, r19	; 0x07
    1218:	26 83       	std	Z+6, r18	; 0x06
    121a:	14 c0       	rjmp	.+40     	; 0x1244 <fputc+0x6e>
    121c:	8b 01       	movw	r16, r22
    121e:	ec 01       	movw	r28, r24
    1220:	fb 01       	movw	r30, r22
    1222:	00 84       	ldd	r0, Z+8	; 0x08
    1224:	f1 85       	ldd	r31, Z+9	; 0x09
    1226:	e0 2d       	mov	r30, r0
    1228:	09 95       	icall
    122a:	89 2b       	or	r24, r25
    122c:	e1 f6       	brne	.-72     	; 0x11e6 <fputc+0x10>
    122e:	d8 01       	movw	r26, r16
    1230:	16 96       	adiw	r26, 0x06	; 6
    1232:	8d 91       	ld	r24, X+
    1234:	9c 91       	ld	r25, X
    1236:	17 97       	sbiw	r26, 0x07	; 7
    1238:	01 96       	adiw	r24, 0x01	; 1
    123a:	17 96       	adiw	r26, 0x07	; 7
    123c:	9c 93       	st	X, r25
    123e:	8e 93       	st	-X, r24
    1240:	16 97       	sbiw	r26, 0x06	; 6
    1242:	ce 01       	movw	r24, r28
    1244:	df 91       	pop	r29
    1246:	cf 91       	pop	r28
    1248:	1f 91       	pop	r17
    124a:	0f 91       	pop	r16
    124c:	08 95       	ret

0000124e <__ultoa_invert>:
    124e:	fa 01       	movw	r30, r20
    1250:	aa 27       	eor	r26, r26
    1252:	28 30       	cpi	r18, 0x08	; 8
    1254:	51 f1       	breq	.+84     	; 0x12aa <__ultoa_invert+0x5c>
    1256:	20 31       	cpi	r18, 0x10	; 16
    1258:	81 f1       	breq	.+96     	; 0x12ba <__ultoa_invert+0x6c>
    125a:	e8 94       	clt
    125c:	6f 93       	push	r22
    125e:	6e 7f       	andi	r22, 0xFE	; 254
    1260:	6e 5f       	subi	r22, 0xFE	; 254
    1262:	7f 4f       	sbci	r23, 0xFF	; 255
    1264:	8f 4f       	sbci	r24, 0xFF	; 255
    1266:	9f 4f       	sbci	r25, 0xFF	; 255
    1268:	af 4f       	sbci	r26, 0xFF	; 255
    126a:	b1 e0       	ldi	r27, 0x01	; 1
    126c:	3e d0       	rcall	.+124    	; 0x12ea <__ultoa_invert+0x9c>
    126e:	b4 e0       	ldi	r27, 0x04	; 4
    1270:	3c d0       	rcall	.+120    	; 0x12ea <__ultoa_invert+0x9c>
    1272:	67 0f       	add	r22, r23
    1274:	78 1f       	adc	r23, r24
    1276:	89 1f       	adc	r24, r25
    1278:	9a 1f       	adc	r25, r26
    127a:	a1 1d       	adc	r26, r1
    127c:	68 0f       	add	r22, r24
    127e:	79 1f       	adc	r23, r25
    1280:	8a 1f       	adc	r24, r26
    1282:	91 1d       	adc	r25, r1
    1284:	a1 1d       	adc	r26, r1
    1286:	6a 0f       	add	r22, r26
    1288:	71 1d       	adc	r23, r1
    128a:	81 1d       	adc	r24, r1
    128c:	91 1d       	adc	r25, r1
    128e:	a1 1d       	adc	r26, r1
    1290:	20 d0       	rcall	.+64     	; 0x12d2 <__ultoa_invert+0x84>
    1292:	09 f4       	brne	.+2      	; 0x1296 <__ultoa_invert+0x48>
    1294:	68 94       	set
    1296:	3f 91       	pop	r19
    1298:	2a e0       	ldi	r18, 0x0A	; 10
    129a:	26 9f       	mul	r18, r22
    129c:	11 24       	eor	r1, r1
    129e:	30 19       	sub	r19, r0
    12a0:	30 5d       	subi	r19, 0xD0	; 208
    12a2:	31 93       	st	Z+, r19
    12a4:	de f6       	brtc	.-74     	; 0x125c <__ultoa_invert+0xe>
    12a6:	cf 01       	movw	r24, r30
    12a8:	08 95       	ret
    12aa:	46 2f       	mov	r20, r22
    12ac:	47 70       	andi	r20, 0x07	; 7
    12ae:	40 5d       	subi	r20, 0xD0	; 208
    12b0:	41 93       	st	Z+, r20
    12b2:	b3 e0       	ldi	r27, 0x03	; 3
    12b4:	0f d0       	rcall	.+30     	; 0x12d4 <__ultoa_invert+0x86>
    12b6:	c9 f7       	brne	.-14     	; 0x12aa <__ultoa_invert+0x5c>
    12b8:	f6 cf       	rjmp	.-20     	; 0x12a6 <__ultoa_invert+0x58>
    12ba:	46 2f       	mov	r20, r22
    12bc:	4f 70       	andi	r20, 0x0F	; 15
    12be:	40 5d       	subi	r20, 0xD0	; 208
    12c0:	4a 33       	cpi	r20, 0x3A	; 58
    12c2:	18 f0       	brcs	.+6      	; 0x12ca <__ultoa_invert+0x7c>
    12c4:	49 5d       	subi	r20, 0xD9	; 217
    12c6:	31 fd       	sbrc	r19, 1
    12c8:	40 52       	subi	r20, 0x20	; 32
    12ca:	41 93       	st	Z+, r20
    12cc:	02 d0       	rcall	.+4      	; 0x12d2 <__ultoa_invert+0x84>
    12ce:	a9 f7       	brne	.-22     	; 0x12ba <__ultoa_invert+0x6c>
    12d0:	ea cf       	rjmp	.-44     	; 0x12a6 <__ultoa_invert+0x58>
    12d2:	b4 e0       	ldi	r27, 0x04	; 4
    12d4:	a6 95       	lsr	r26
    12d6:	97 95       	ror	r25
    12d8:	87 95       	ror	r24
    12da:	77 95       	ror	r23
    12dc:	67 95       	ror	r22
    12de:	ba 95       	dec	r27
    12e0:	c9 f7       	brne	.-14     	; 0x12d4 <__ultoa_invert+0x86>
    12e2:	00 97       	sbiw	r24, 0x00	; 0
    12e4:	61 05       	cpc	r22, r1
    12e6:	71 05       	cpc	r23, r1
    12e8:	08 95       	ret
    12ea:	9b 01       	movw	r18, r22
    12ec:	ac 01       	movw	r20, r24
    12ee:	0a 2e       	mov	r0, r26
    12f0:	06 94       	lsr	r0
    12f2:	57 95       	ror	r21
    12f4:	47 95       	ror	r20
    12f6:	37 95       	ror	r19
    12f8:	27 95       	ror	r18
    12fa:	ba 95       	dec	r27
    12fc:	c9 f7       	brne	.-14     	; 0x12f0 <__ultoa_invert+0xa2>
    12fe:	62 0f       	add	r22, r18
    1300:	73 1f       	adc	r23, r19
    1302:	84 1f       	adc	r24, r20
    1304:	95 1f       	adc	r25, r21
    1306:	a0 1d       	adc	r26, r0
    1308:	08 95       	ret

0000130a <__prologue_saves__>:
    130a:	2f 92       	push	r2
    130c:	3f 92       	push	r3
    130e:	4f 92       	push	r4
    1310:	5f 92       	push	r5
    1312:	6f 92       	push	r6
    1314:	7f 92       	push	r7
    1316:	8f 92       	push	r8
    1318:	9f 92       	push	r9
    131a:	af 92       	push	r10
    131c:	bf 92       	push	r11
    131e:	cf 92       	push	r12
    1320:	df 92       	push	r13
    1322:	ef 92       	push	r14
    1324:	ff 92       	push	r15
    1326:	0f 93       	push	r16
    1328:	1f 93       	push	r17
    132a:	cf 93       	push	r28
    132c:	df 93       	push	r29
    132e:	cd b7       	in	r28, 0x3d	; 61
    1330:	de b7       	in	r29, 0x3e	; 62
    1332:	ca 1b       	sub	r28, r26
    1334:	db 0b       	sbc	r29, r27
    1336:	0f b6       	in	r0, 0x3f	; 63
    1338:	f8 94       	cli
    133a:	de bf       	out	0x3e, r29	; 62
    133c:	0f be       	out	0x3f, r0	; 63
    133e:	cd bf       	out	0x3d, r28	; 61
    1340:	09 94       	ijmp

00001342 <__epilogue_restores__>:
    1342:	2a 88       	ldd	r2, Y+18	; 0x12
    1344:	39 88       	ldd	r3, Y+17	; 0x11
    1346:	48 88       	ldd	r4, Y+16	; 0x10
    1348:	5f 84       	ldd	r5, Y+15	; 0x0f
    134a:	6e 84       	ldd	r6, Y+14	; 0x0e
    134c:	7d 84       	ldd	r7, Y+13	; 0x0d
    134e:	8c 84       	ldd	r8, Y+12	; 0x0c
    1350:	9b 84       	ldd	r9, Y+11	; 0x0b
    1352:	aa 84       	ldd	r10, Y+10	; 0x0a
    1354:	b9 84       	ldd	r11, Y+9	; 0x09
    1356:	c8 84       	ldd	r12, Y+8	; 0x08
    1358:	df 80       	ldd	r13, Y+7	; 0x07
    135a:	ee 80       	ldd	r14, Y+6	; 0x06
    135c:	fd 80       	ldd	r15, Y+5	; 0x05
    135e:	0c 81       	ldd	r16, Y+4	; 0x04
    1360:	1b 81       	ldd	r17, Y+3	; 0x03
    1362:	aa 81       	ldd	r26, Y+2	; 0x02
    1364:	b9 81       	ldd	r27, Y+1	; 0x01
    1366:	ce 0f       	add	r28, r30
    1368:	d1 1d       	adc	r29, r1
    136a:	0f b6       	in	r0, 0x3f	; 63
    136c:	f8 94       	cli
    136e:	de bf       	out	0x3e, r29	; 62
    1370:	0f be       	out	0x3f, r0	; 63
    1372:	cd bf       	out	0x3d, r28	; 61
    1374:	ed 01       	movw	r28, r26
    1376:	08 95       	ret

00001378 <_exit>:
    1378:	f8 94       	cli

0000137a <__stop_program>:
    137a:	ff cf       	rjmp	.-2      	; 0x137a <__stop_program>
